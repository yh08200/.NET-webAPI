<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Edu.Framework</name>
    </assembly>
    <members>
        <member name="T:Edu.Framework.Aop.CodeReviewAttribute">
            <summary>
            代码操作记录
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Aop.CodeReviewAttribute.Reviewer">
            <summary>
            代码检查人
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Aop.CodeReviewAttribute.Date">
            <summary>
            检查日期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Aop.CodeReviewAttribute.Comment">
            <summary>
            检查结果信息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Aop.CodeReviewAttribute.#ctor(System.String,System.String)">
            <summary>
            参数构造器
            
            </summary>
            <param name="reviewer">代码检查人</param><param name="date">检查日期</param>
        </member>
        <member name="T:Edu.Framework.Cache.CacheItem">
            <summary>
            封装的缓存容器
            
            </summary>
            
            <remarks>
            缓存项
            </remarks>
        </member>
        <member name="P:Edu.Framework.Cache.CacheItem.LastAccessedTime">
            <summary>
            最后访问时间
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Cache.CacheItem.ExpireTime">
            <summary>
            过期时间
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Cache.CacheItem.IsExprie">
            <summary>
            是否过期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Cache.CacheItem.Data">
            <summary>
            缓存数据
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Cache.CacheItem.Hits">
            <summary>
            命中次数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.CacheItem.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.CacheManager">
            <summary>
            缓存管理类
            
            </summary>
            
            <remarks>
            缓存管理器
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cache.CacheManager.GetInstance(Edu.Framework.Cache.CacheType)">
            <summary>
            获取使用Cache接口的默认实例
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Cache.CacheType.HttpCache">
            <summary>
            HTTP缓存 
            </summary>
        </member>
        <member name="F:Edu.Framework.Cache.CacheType.Memory">
            <summary>
            内存方式（弱引用） 
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.HttpRuntimeCache">
            <summary>
            HTTP全局缓存
            
            </summary>
            
            <remarks>
            HttpRuntime缓存
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.GetCache(System.String)">
            <summary>
            获取缓存
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            缓存对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.SetCache(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param><param name="expirationTime">过期时间</param>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存,缓存时间为DateTime.MaxValue值
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param><param name="ts">相对过期时间</param>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.UpdaetCache(System.String,Edu.Framework.Cache.CacheItem)">
            <summary>
            更新缓存
            
            </summary>
            <param name="key">缓存键</param><param name="cache">缓存项</param>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.Clear(System.String)">
            <summary>
            清除缓存
            
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.ClearAll">
            <summary>
            清除所有缓存
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.GetCacheItem(System.String)">
            <summary>
            获取缓存
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            返回缓存项
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.HttpRuntimeCache.GetAll">
            <summary>
            获取所有字典内容
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.ICache">
            <summary>
            缓存管理接口
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.GetCache(System.String)">
            <summary>
            获取缓存
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            缓存数据
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.SetCache(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存(绝对过期)
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存对象</param><param name="expirationTime">缓存过期日期</param>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存(服务器进程，不过期)
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存对象</param>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存(相对过期)
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存对象</param><param name="ts">相对过期</param>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.UpdaetCache(System.String,Edu.Framework.Cache.CacheItem)">
            <summary>
            更新缓存
            
            </summary>
            <param name="key">缓存键</param><param name="cache">缓存项</param>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.Clear(System.String)">
            <summary>
            清除缓存
            
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.ClearAll">
            <summary>
            清除所有缓存
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.GetCacheItem(System.String)">
            <summary>
            获取缓存的详细内容
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            缓存项
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.ICache.GetAll">
            <summary>
            获取所有缓存项
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.WeakRefCache">
            <summary>
            弱引用方式缓存
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Cache.WeakRefCache._weakref">
            <summary>
            缓存数据存放容器
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.GetCache(System.String)">
            <summary>
            获取缓存
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            缓存对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.SetCache(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param><param name="expirationTime">过期时间</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存,缓存时间为DateTime.MaxValue值
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            
            </summary>
            <param name="key">缓存键</param><param name="value">缓存值</param><param name="ts">相对过期时间</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.UpdaetCache(System.String,Edu.Framework.Cache.CacheItem)">
            <summary>
            更新缓存
            
            </summary>
            <param name="key">缓存键</param><param name="cache">缓存项</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.Clear(System.String)">
            <summary>
            清除缓存
            
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.ClearAll">
            <summary>
            清除所有缓存
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.GetCacheItem(System.String)">
            <summary>
            获取缓存
            
            </summary>
            <param name="key">缓存键</param>
            <returns>
            返回缓存项
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefCache.GetAll">
            <summary>
            获取所有字典内容
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cache.WeakRefDictionary`2">
            <summary>
            弱引用类型，在系统需要的时候系统会自动释放
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Cache.WeakRefDictionary`2.Item(`0)">
            <summary>
            返回字典值
            
            </summary>
            <param name="key">键名</param>
            <returns>
            键值
            </returns>
        </member>
        <member name="P:Edu.Framework.Cache.WeakRefDictionary`2.Count">
            <summary>
            获取字典个数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.Add(`0,`1)">
            <summary>
            新增一个值
            
            </summary>
            <param name="key">键名</param><param name="value">键值</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.ContainsKey(`0)">
            <summary>
            检查值是否存在
            
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.GetEnumerator">
            <summary>
            遍历字典内容
            
            </summary>
            
            <returns>
            所有键值对
            </returns>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.Remove(`0)">
            <summary>
            移除字典项
            
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.RemoveAll">
            <summary>
            移除字典项
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.TryGet(`0,`1@)">
            <summary>
            尝试获取值
            
            </summary>
            <param name="key">键名</param><param name="value">键值</param>
        </member>
        <member name="M:Edu.Framework.Cache.WeakRefDictionary`2.CleanAbandonedItems">
            <summary>
            清除已经被内存释放的元素
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.DigitalSignatureType">
            <summary>
            数字签名字符串格式
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.DigitalSignatureType.Type1">
            <summary>
            {签名Key}{待签名字符}
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.DigitalSignatureType.Type2">
            <summary>
            {待签名字符}{签名Key}
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.OperationType">
            <summary>
            数据操作类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.Add">
            <summary>
            新增
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.Modify">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.Query">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.AjaxAdd">
            <summary>
            异步新增
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.AjaxDelete">
            <summary>
            异步删除
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.AjaxModify">
            <summary>
            异步修改
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.OperationType.AjaxQuery">
            <summary>
            异步查询
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.PagingInfo`1">
            <summary>
            分页基类
            
            </summary>
            <typeparam name="T">查询数据模型类型</typeparam>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.PageIndex">
            <summary>
            页索引
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.PageSize">
            <summary>
            页大小
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.PageCount">
            <summary>
            页数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.RecordCount">
            <summary>
            总记录数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.Message">
            <summary>
            消息内容
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.PageResults">
            <summary>
            查询结果
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.PagingInfo`1.State">
            <summary>
            分页状态
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.ProtocolType">
            <summary>
            通信协议类型
            
            </summary>
            
            <remarks>
            若需要其他类型则根据需求迭代升级
            </remarks>
        </member>
        <member name="F:Edu.Framework.Comm.ProtocolType.Http">
            <summary>
            Http协议
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.ProtocolType.Https">
            <summary>
            Https协议 
            </summary>
        </member>
        <member name="F:Edu.Framework.Comm.ProtocolType.Ftp">
            <summary>
            Ftp协议 
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.RemoteConfigDetail">
            <summary>
            远程服务配置明细
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.Protocol">
            <summary>
            通信协议类型
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.IdentityKey">
            <summary>
            身份认证KEY
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.Ip">
            <summary>
            IP
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.Port">
            <summary>
            端口
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.VirturlRootPath">
            <summary>
            虚拟根路径
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigDetail.InterfaceName">
            <summary>
            接口名
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigDetail.Validating(System.String@,System.Boolean)">
            <summary>
            验证参数
            
            </summary>
            <param name="message">错误消息</param><param name="validInterfaceName">服务接口名是否必须验证</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigDetail.CastToWcfRequest(System.Collections.Generic.List{Edu.Framework.Comm.WebRequestArgs},System.String)">
            <summary>
            把当前服务配置转换为WcfRequest请求对象
            
            </summary>
            <param name="args">请求参数</param><param name="interfaceName">接口名</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigDetail.CastToWebRequest(System.Object[],System.String)">
            <summary>
            把当前服务配置转换为WebRequest请求对象
            
            </summary>
            <param name="args">请求参数</param><param name="interfaceName">WebService方法</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigDetail.CastToWebApiRequest``1(``0,System.Collections.Generic.List{Edu.Framework.Comm.WebRequestArgs},System.String)">
            <summary>
            把当前服务配置转换为WebApiRequest请求对象
            
            </summary>
            <typeparam name="TRequest">WebApi请求参数类型</typeparam><param name="request">WebApi请求参数</param><param name="interfaceName">接口名，为空则为默认接口名</param><param name="headerKeyValues">请求头信息</param>
            <returns>
            WebApiRequest请求对象
            </returns>
        </member>
        <member name="T:Edu.Framework.Comm.RemoteConfigItem">
            <summary>
            远程服务配置项
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigItem.Key">
            <summary>
            配置项唯一标识
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.RemoteConfigItem.Config">
            <summary>
            服务配置信息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigItem.#ctor(System.String,Edu.Framework.Comm.RemoteConfigDetail)">
            <summary>
            构造函数
            
            </summary>
            <param name="key"/><param name="configItem"/>
        </member>
        <member name="M:Edu.Framework.Comm.RemoteConfigItem.UpdateConfig(Edu.Framework.Comm.RemoteConfigDetail)">
            <summary>
            更新配置信息
            
            </summary>
            <param name="configItem">服务配置信息</param>
        </member>
        <member name="T:Edu.Framework.Comm.WcfRequest">
            <summary>
            Wcf请求参数封装
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.Url">
            <summary>
            WebService路径
            
            </summary>
            
            <remarks>
            在实际实行时，内部会重置为标准的格式，赋值的时候，可以不赋值，但要确保其他参数一定正确
            
            </remarks>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.MethodName">
            <summary>
            请求方法名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.Args">
            <summary>
            请求参数
            
            </summary>
            
            <remarks>
            如果服务是RestFul风格的，则参数Value必须有值，确保值的顺序需与服务端URL参数顺序一致
                        如果服务是传统风格的，即地址后面是？key=value形式的，请确保参数名，参数值无误
            
            </remarks>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.ProtocolType">
            <summary>
            通信协议类型
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.VirturlRootPath">
            <summary>
            相对跟地址（以符号"/"开头）
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.Ip">
            <summary>
            IP,若是http,https协议，ip还可以使用域名代替IP，根据相关协议,域名最终会转换为IP
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WcfRequest.Port">
            <summary>
            端口
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Comm.WcfRequest.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.WebRequest">
            <summary>
            WebService请求参数封装
            
            </summary>
            
            <remarks>
            WebService专用
            </remarks>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.Url">
            <summary>
            WebService路径
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.MethodName">
            <summary>
            请求方法名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.Args">
            <summary>
            请求参数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.VirturlRootPath">
            <summary>
            相对跟地址（以符号"/"开头）
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.ClassName">
            <summary>
            WebService类名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.ProtocolType">
            <summary>
            通信协议类型
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.Ip">
            <summary>
            IP
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequest.Port">
            <summary>
            端口
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.WebApiRequest`1">
            <summary>
            WebApi请求参数封装
            
            </summary>
            <typeparam name="TInput"/>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.Args">
            <summary>
            请求实体数据
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.VirturlRootPath">
            <summary>
            相对跟地址（以符号"/"开头）
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.ProtocolType">
            <summary>
            通信协议类型
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.Ip">
            <summary>
            IP
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.Port">
            <summary>
            端口
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.WebApiUrl">
            <summary>
            WebApi路径
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.ContactName">
            <summary>
            接口名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebApiRequest`1.HeaderKeyValues">
            <summary>
            请求头信息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Comm.WebApiRequest`1.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Comm.WebRequestArgs">
            <summary>
            传统Web服务，Wcf请求，请求参数，键值对
            
            </summary>
            
            <remarks>
            WebService,WcfService专用
            </remarks>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequestArgs.Key">
            <summary>
            服务请求参数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Comm.WebRequestArgs.Value">
            <summary>
            服务请求参数值
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cryptography.CryptManage">
            <summary>
            加密解密管理(需要防止非法调用)publickey 为6FD3DF60-FDBE-490C-9754-63AD6577E727
            
            </summary>
            
            <remarks>
            加密解密管理
            </remarks>
        </member>
        <member name="F:Edu.Framework.Cryptography.CryptManage.Pk">
            <summary>
            内部默认KEY
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Cryptography.CryptManage._isvalid">
            <summary>
            是否严重过
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.#ctor(System.String)">
            <summary>
            构造函数
            
            </summary>
            <param name="skey">随机key</param>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Encrypt(System.String,System.String)">
            <summary>
            加密1
            
            </summary>
            <param name="plainstr">待加密字符串</param><param name="password">加密密码</param>
            <returns>
            加密后字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Encrypt(System.Byte[],System.String)">
            <summary>
            加密1
            
            </summary>
            <param name="plainbty">待加密二进制</param><param name="password">加密密码</param>
            <returns>
            加密后二进制
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Encrypt(System.String)">
            <summary>
            加密
            
            </summary>
            <param name="plainstr">待加密字符串</param>
            <returns>
            加密后字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Encrypt(System.Byte[])">
            <summary>
            加密
            
            </summary>
            <param name="plainbty">待加密二进制</param>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Decrypt(System.String,System.String)">
            <summary>
            解密
            
            </summary>
            <param name="encryptstr">待解密字符串</param><param name="password">加密密码</param>
            <returns>
            解密后字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Decrypt(System.Byte[],System.String)">
            <summary>
            解密
            
            </summary>
            <param name="encryptbty">待解密二进制</param><param name="password">加密密码</param>
            <returns>
            解密后二进制
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Decrypt(System.String)">
            <summary>
            解密
            
            </summary>
            <param name="encryptstr">待解密字符串</param>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptManage.Decrypt(System.Byte[])">
            <summary>
            解密
            
            </summary>
            <param name="encryptbty">待解密二进制</param>
        </member>
        <member name="T:Edu.Framework.Cryptography.CryptXxTea">
            <summary>
            XXTea加密解密类
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptXxTea.Decrypt(System.String,System.String)">
            <summary>
            解密
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptXxTea.Decrypt(System.Byte[],System.String)">
            <summary>
            解密
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptXxTea.Encrypt(System.String,System.String)">
            <summary>
            加密
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.CryptXxTea.Encrypt(System.Byte[],System.String)">
            <summary>
            加密
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Cryptography.HashCode">
            <summary>
            Hash生成类
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.HashCode.Hash(System.Byte[],System.String)">
            <summary>
            Hash算法
            
            </summary>
            <param name="input">被Hash的字节数组</param><param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>
            Hash结果字节数组
            </returns>
            
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cryptography.HashCode.Hash(System.IO.Stream,System.String)">
            <summary>
            Hash算法
            
            </summary>
            <param name="input">被Hash的字节流</param><param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>
            Hash结果字节数组
            </returns>
            
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cryptography.HashCode.HashFile(System.String,System.String)">
            <summary>
            Hash文件
            
            </summary>
            <param name="fileName">被Hash的文件（包括路径）</param><param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>
            Hash结果字符串
            </returns>
            
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cryptography.HashCode.HashFileReturnRawData(System.String,System.String)">
            <summary>
            Hash文件
            
            </summary>
            <param name="fileName">被Hash的文件（包括路径）</param><param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>
            Hash结果
            </returns>
            
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="T:Edu.Framework.Cryptography.Xxtea">
            <summary>
            XXTEA加解密算法
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            XXTEA加密
            
            </summary>
            <param name="data">原文</param><param name="key">密钥</param>
            <returns>
            密文
            </returns>
            
            <remarks>
            密文不包含原始数据长度
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Encrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            XXTEA解密
            
            </summary>
            <param name="data">原文</param><param name="key">密钥</param><param name="includeDataLength">密文是否包含原始数据长度</param>
            <returns>
            密文
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密
            
            </summary>
            <param name="data">密文</param><param name="key">密钥</param>
            <returns>
            原文
            </returns>
            
            <remarks>
            密文不包含原始数据长度
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Decrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            解密
            
            </summary>
            <param name="data">密文</param><param name="key">密钥</param><param name="includeDataLength">密文是否包含原始数据长度</param>
            <returns>
            原文
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Encrypt(System.UInt32[],System.UInt32[])">
            <summary>
            加密
            
            </summary>
            <param name="v">原文</param><param name="k">密钥</param>
            <returns>
            密文
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.Decrypt(System.UInt32[],System.UInt32[])">
            <summary>
            解密
            
            </summary>
            <param name="v">密文</param><param name="k">密钥</param>
            <returns>
            原文
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.ToUInt32Array(System.Byte[],System.Boolean)">
            <summary>
            字节数组转换为无符号整数数组
            
            </summary>
            <param name="data">字节数据</param><param name="includeLength">是否包含字节长度</param>
            <returns>
            无符号整数数组
            </returns>
        </member>
        <member name="M:Edu.Framework.Cryptography.Xxtea.ToByteArray(System.UInt32[],System.Boolean)">
            <summary>
            整数数组转换为字节数组
            
            </summary>
            <param name="data">整数数组</param><param name="includeLength">是否包含数组长度</param>
            <returns>
            字节数组
            </returns>
        </member>
        <member name="T:Edu.Framework.EF.Base.BaseEntity">
            <summary>
            抽象实体类型：可用作DbFirst使用以作为Entiry基类
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.Base.BaseEntity`2">
            <summary>
            抽象实体:CodeFirst+自定义公共字段专用
            
            </summary>
            <typeparam name="T">实体主键类型</typeparam><typeparam name="TVersion">数据版本控制字段类型</typeparam>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.CreatedDate">
            <summary>
            创建日期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.CreatedBy">
            <summary>
            创建人
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.UpdatedDate">
            <summary>
            更新日期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.UpdatedBy">
            <summary>
            更新人
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.RowVersion">
            <summary>
            版本号
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.BaseEntity`2.SortId">
            <summary>
            序列号
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.Base.EntityKey`1">
            <summary>
            抽象实体对象：CodeFirst模式抽象主键
            
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
        </member>
        <member name="P:Edu.Framework.EF.Base.EntityKey`1.Id">
            <summary>
            实体主键
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.Base.IAbstrctEntity">
            <summary>
            抽象实体接口:CodeDbFirst+自定义公共字段专用
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.Base.IAbstrctEntity`1">
            <summary>
            抽象实体接口::CodeFirst+自定义公共字段专用
            
            </summary>
            <typeparam name="TVersion">版本号字段类型</typeparam>
        </member>
        <member name="P:Edu.Framework.EF.Base.IAbstrctEntity`1.CreatedDate">
            <summary>
            创建日期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.IAbstrctEntity`1.CreatedBy">
            <summary>
            创建人
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.IAbstrctEntity`1.UpdatedDate">
            <summary>
            更新日期
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.IAbstrctEntity`1.UpdatedBy">
            <summary>
            更新人
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.Base.IAbstrctEntity`1.RowVersion">
            <summary>
            数据版本号
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.Base.IEntityKey`1">
            <summary>
            实体对象接口
            
            </summary>
            <typeparam name="T">实体对象主键类型</typeparam>
        </member>
        <member name="P:Edu.Framework.EF.Base.IEntityKey`1.Id">
            <summary>
            实体主键
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.BaseRepository`2">
            <summary>
            创储模式抽象实现
            
            </summary>
            <typeparam name="TObject">对象类型</typeparam><typeparam name="TDbType">Db上下文类型</typeparam>
        </member>
        <member name="F:Edu.Framework.EF.BaseRepository`2.Context">
            <summary>
            全局db对象
            
            </summary>
        </member>
        <member name="F:Edu.Framework.EF.BaseRepository`2._shareContext">
            <summary>
            是否共享数据上下文
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.BaseRepository`2.DbSet">
            <summary>
            DBSet对象
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.BaseRepository`2.Count">
            <summary>
            返回数据集的总条数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.#ctor(`0,System.Boolean)">
            <summary>
            构造函数
            
            </summary>
            <param name="context">数据库上下文</param><param name="shareContext">是否共享数据山下文</param>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Dispose">
            <summary>
            释放对象
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.GetDbSet">
            <summary>
            获取当前DbSet对象
            
            </summary>
            
            <returns/>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.SetDbContext(System.Data.Entity.DbContext)">
            <summary>
            设置DB上下文
            
            </summary>
            <param name="context">DB上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.SetDbContext(System.Boolean)">
            <summary>
            设置DB上下文
            
            </summary>
            <param name="shareContext">是否共享DB上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.SetDbContext(System.Data.Entity.DbContext,System.Boolean)">
            <summary>
            设置DB上下文
            
            </summary>
            <param name="context">DB上下文</param><param name="shareContext">是否共享DB上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.All">
            <summary>
            获取实体类的所有对象（单表）
            
            </summary>
            
            <returns>
            <see cref="T:System.Linq.IQueryable"/>查询对象
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            查询方法（单表）
            
            <example>
            eg:rspCategory.Query(p =&gt; p.MNAME == "测试")   此处返回IQueryable
                        如需获取最终数据 后面加上.ToList()等最终查询语句，如不需要跟踪对象状态写法
                        .Query().AsNoTracking().ToList();
            
            </example>
            
            </summary>
            <param name="predicate">筛选条件</param>
            <returns>
            IQueryable
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32@,System.Int32,System.Int32,System.Func{System.Linq.IQueryable{`1},System.Linq.IQueryable{`1}})">
            <summary>
            查询对象，带分页模式（单表）
            
            </summary>
            <param name="filter">筛选条件</param><param name="total">返回值，总条数</param><param name="index">当前页</param><param name="size">每页条数</param><param name="orderBy">orderby</param>
            <returns>
            IQueryable
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.PageQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{`1},System.Linq.IQueryable{`1}})">
            <summary>
            查询对象，带分页模式
            
            </summary>
            <param name="filter">分页过滤器</param><param name="index">分页索引</param><param name="size">分页大小</param><param name="orderBy">排序</param>
            <returns>
            返回分页结果
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Contains(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            根据过滤器判断数据是否在数据库中存在.
            
            </summary>
            <param name="predicate">数据筛选过滤器</param>
            <returns>
            true:数据存在，false:数据不存在
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Find(System.Object[])">
            <summary>
            查找单条数据(简单查询).
            
            </summary>
            <param name="keys">主句主键或者复合组件</param>
            <returns>
            查询到的数据
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            查找单条数据(简单查询).
            
            </summary>
            <param name="predicate">数据筛选过滤器</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Any(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            检查某条数据是否存在.
            
            </summary>
            <param name="predicate">查询表达式</param>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Create(`1)">
            <summary>
            新增对象
            
            </summary>
            <param name="TObject">数据实体</param>
            <returns>
            返回保存后的实体对象
            </returns>
            
            <remarks>
            如果
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Create(System.Collections.Generic.List{`1})">
            <summary>
            利用原生支持批量创建数据
            
            </summary>
            <param name="listEntity">带带创建数据</param>
            <returns>
            返回创建的数据
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.BatchDelete(System.Linq.IQueryable{`1})">
            <summary>
            批量删除
            
            </summary>
            <param name="query">待删除对象</param>
            <remarks>
            使用 自定义 扩展实现批量删除
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.BatchDelete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            批量删除
            
            </summary>
            <param name="filterExpression">过滤表达式</param>
            <remarks>
            使用自定义扩展实现批量删除,将会立马执行
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.BatchUpdate(System.Linq.IQueryable{`1},System.Linq.Expressions.Expression{System.Func{`1,`1}})">
            <summary>
            批量更新
            
            </summary>
            <param name="query">待更新对象</param><param name="updateExpression">更新表达式</param>
            <remarks>
            使用 自定义 扩展实现批量更新
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.BatchUpdate(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`1}})">
            <summary>
            批量，部分更新
            
            </summary>
            <param name="filterExpression">过滤表达式</param><param name="updateExpression">更新表达式</param>
            <remarks>
            使用自定义扩展实现批量更新
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Delete(`1)">
            <summary>
            删除对象
            
            </summary>
            <param name="TObject">数据实体</param>
            <returns>
            返回操作所印象行数
            </returns>
            
            <remarks>
            本操作使用的是EF原生方法，适合于少量数据
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Update(`1)">
            <summary>
            更新对象
            
            </summary>
            <param name="TObject">数据实体</param>
            <returns>
            返回操作所印象行数
            </returns>
            
            <remarks>
            本操作使用的是EF原生方法，适合于少量数据
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            批量删除
            
            </summary>
            <param name="predicate">数据筛选器</param>
            <returns>
            返回操作所印象行数
            </returns>
            
            <remarks>
            本操作使用的是EF原生方法，适合于少量数据
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            批量删除
            
            </summary>
            <param name="listObjects">待删除对象</param>
            <returns>
            返回操作所印象行数
            </returns>
            
            <remarks>
            本操作使用的是EF原生方法，适合于少量数据
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.BaseRepository`2.Update(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`1}})">
            <summary>
            批量更新
            
            </summary>
            <param name="predicate">数据筛选器</param><param name="prediUpdate"/>
            <remarks>
            使用 EntityFramework.Extended 扩展实现批量更新
            
            </remarks>
            
            <returns/>
        </member>
        <member name="T:Edu.Framework.EF.DbHelp">
            <summary>
            数据库操作相关类
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.DbHelp.SystemName">
            <summary>
            获取软件名
            
            </summary>
            
            <returns/>
            
            <remarks>
            请在App.config的AppSetting节点添加key=SystemName的配置，默认值有1表示Oracle,2表示SqlServer,3表示MySql,4表示Sqlite,其他类型待定
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.DbHelp.GetDataBaseSchema(System.String)">
            <summary>
            获取数据库Schema
            
            </summary>
            <param name="dataBaseSchema">数据库架构名定义</param>
            <returns>
            返回数据库架构定义
            </returns>
            
            <remarks>
            请在App.config的AppSetting节点添加key=DataBaseSchema的配置
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.DbHelp.SystemVersion(System.String)">
            <summary>
            获取系统版权
            
            </summary>
            <param name="systemVersion">AppSetting节点下key=SystemVersion</param>
            <returns>
            系统版权
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.DbHelp.GetDatabaseType(System.String)">
            <summary>
            获取数据库类型
            
            </summary>
            <param name="dataBaseType">AppSetting节点下key=DataBaseType</param>
            <returns>
            数据库类型
            </returns>
            
            <remarks>
            选项值有1表示Oracle,2表示SqlServer,3表示MySql,4表示Sqlite,其他类型待定
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.DbHelp.RegisterIBatchRunner(Edu.Framework.Enums.DataBaseType)">
            <summary>
            注册IBatchRunner
            
            </summary>
            <param name="dbType">数据库类型</param>
            <remarks>
            适用于引用了EntityFramework.Extends.dll组件
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.DbHelp.RegisterIBatchRunner(EntityFramework.Batch.IBatchRunner)">
            <summary>
            注册IBatchRunner
            
            </summary>
            <param name="batchRunner">某数据库的batchRunner实现</param>
            <remarks>
            适用于引用了EntityFramework.Extends.dll组件
            </remarks>
        </member>
        <member name="T:Edu.Framework.EF.EfIntercepter">
            <summary>
            EF.SQL拦截
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            ScalarExecuting拦截
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            ScalarExecuted拦截
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            NonQueryExecuting.SQL连接
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            NonQueryExecuted.SQL拦截
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            ReaderExecuting.SQL拦截
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.EfIntercepter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            ReaderExecuted.SQL拦截
            
            </summary>
            <param name="command">DbCommand对象</param><param name="interceptionContext">SQL拦截上下文</param>
        </member>
        <member name="T:Edu.Framework.EF.IEntityMapper">
            <summary>
            实体映射抽象
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.IEntityMapper.RegistTo(System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar)">
            <summary>
            将当前实体映射对象注册到当前数据访问上下文实体映射配置注册器中
            
            </summary>
            <param name="configurations">实体映射配置注册器</param>
        </member>
        <member name="T:Edu.Framework.EF.IRepository`1">
            <summary>
            仓储模式接口
            
            </summary>
            <typeparam name="T">实体对象类型</typeparam>
            <remarks>
            原则上，一个仓储实例对应一张表
            </remarks>
        </member>
        <member name="P:Edu.Framework.EF.IRepository`1.Count">
            <summary>
            获取对象总数.
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.GetDbSet">
            <summary>
            获取DbSet对象
            
            </summary>
            
            <returns>
            返回DbSet对象
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.SetDbContext(System.Data.Entity.DbContext)">
            <summary>
            设置Db上下文
            
            </summary>
            <param name="context">数据库上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.SetDbContext(System.Boolean)">
            <summary>
            设置Db上下文
            
            </summary>
            <param name="shareContext">是否共享DB上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.SetDbContext(System.Data.Entity.DbContext,System.Boolean)">
            <summary>
            设置Db上下文，为新增
            
            </summary>
            <param name="context">数据库上下文</param><param name="shareContext">是否共享DB上下文</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.All">
            <summary>
            查询所有数据(单表)
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            过滤并查询数据.
            
            </summary>
            <param name="predicate">过滤表达式树</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32@,System.Int32,System.Int32,System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            过滤并查询数据并分页.
            
            </summary>
            <param name="filter">过滤表达式树</param><param name="total">总记录数</param><param name="index">当前索引</param><param name="size">每页大小</param><param name="orderBy">排序规则</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.PageQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            分页查询
            
            </summary>
            <param name="filter">过滤表达式树</param><param name="index">当前索引</param><param name="size">每页大小</param><param name="orderBy">排序规则</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Contains(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据过滤器判断数据是否在数据库中存在.
            
            </summary>
            <param name="predicate">过滤器表达式树</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Find(System.Object[])">
            <summary>
            查找单条数据(简单查询).
            
            </summary>
            <param name="keys">查询参数</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单条数据.
            
            </summary>
            <param name="predicate">查询表达式</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查某条数据是否存在.
            
            </summary>
            <param name="predicate">查询表达式</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Create(`0)">
            <summary>
            创建一对象.
            
            </summary>
            <param name="t">返回创建的数据</param>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Create(System.Collections.Generic.List{`0})">
            <summary>
            批量创建数据
            
            </summary>
            <param name="listEntity">带带创建数据</param>
            <returns>
            返回创建的数据
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Delete(`0)">
            <summary>
            删除数据(简单删除).
            
            </summary>
            <param name="t">要删除的数据对象</param>
            <remarks>
            使用 EF原生支持实现删除
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            批量删除.
            
            </summary>
            <param name="predicate">删除数据表达树</param>
            <remarks>
            使用 EF原生支持实现删除
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除
            
            </summary>
            <param name="listObjects"/>
            <remarks>
            使用 EF原生支持实现删除
            
            </remarks>
            
            <returns/>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Update(`0)">
            <summary>
            更新数据.
            
            </summary>
            <param name="t">待更新的单条数据.</param>
            <remarks>
            使用 EF原生支持实现更新
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量更新
            
            </summary>
            <param name="predicate">筛选条件</param><param name="prediUpdate">更新对象</param>
            <remarks>
            使用 EntityFramework.Extended 扩展实现批量更新
                        目前支持MsSql,MySql,暂不支持其他的数据库，需要自己实现
            
            </remarks>
            
            <returns/>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.BatchDelete(System.Linq.IQueryable{`0})">
            <summary>
            批量删除
            
            </summary>
            <param name="query">待删除对象</param>
            <remarks>
            使用 自定义 扩展实现批量删除
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            批量删除
            
            </summary>
            <param name="filterExpression">过滤表达式</param>
            <remarks>
            使用 自定义 扩展实现批量删除
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.BatchUpdate(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量更新
            
            </summary>
            <param name="query">待更新对象</param><param name="updateExpression">更新表达式</param>
            <remarks>
            使用 自定义 扩展实现批量更新
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="M:Edu.Framework.EF.IRepository`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量，部分更新
            
            </summary>
            <param name="filterExpression">过滤表达式</param><param name="updateExpression">更新表达式</param>
            <remarks>
            使用 自定义 扩展实现批量更新
            
            </remarks>
            
            <returns>
            返回影响行数
            </returns>
        </member>
        <member name="T:Edu.Framework.EF.IScopedRepository">
            <summary>
            仓储标记接口
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.IScopedService">
            <summary>
            业务标记接口
            
            </summary>
        </member>
        <member name="T:Edu.Framework.EF.T4ModelInfo">
            <summary>
            T4实体模型信息类
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.T4ModelInfo.ModuleName">
            <summary>
            获取 模型所在模块名称
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.T4ModelInfo.Name">
            <summary>
            获取 模型名称
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.T4ModelInfo.Description">
            <summary>
            获取 模型描述
            
            </summary>
        </member>
        <member name="P:Edu.Framework.EF.T4ModelInfo.Properties">
            <summary>
            属性集合
            
            </summary>
        </member>
        <member name="M:Edu.Framework.EF.T4ModelInfo.#ctor(System.Type)">
            <summary>
            用
            
            </summary>
            <param name="modelType">于寻找实体数据集的任意实体类型</param>
        </member>
        <member name="T:Edu.Framework.Enums.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DataBaseType.Oracle">
            <summary>
            Oracle 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DataBaseType.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DataBaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DataBaseType.Sqlite">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.DocumentType">
            <summary>
            文档类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.UnKnown">
            <summary>
            默认，未知文档
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.UnSelected">
            <summary>
            请选择文档
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocPpt">
            <summary>
            .ppt类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocPptx">
            <summary>
            .pptx类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocXls">
            <summary>
            .xls类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocXlsx">
            <summary>
            .xlsx类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocDoc">
            <summary>
            .doc类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocDocx">
            <summary>
            .docx类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocMp4">
            <summary>
            .mp4类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocSwf">
            <summary>
            .swf类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocPdf">
            <summary>
            .pdf类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.DocJpg">
            <summary>
            .jpg类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.CadDwg">
            <summary>
            .dwg类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.CadDxf">
            <summary>
            .dxf类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.Html">
            <summary>
            .html类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.DocumentType.Flv">
            <summary>
            .flv类型
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.EmailServiceType">
            <summary>
            邮件服务类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.EmailServiceType.None">
            <summary>
            未知，不做任何处理 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.EmailServiceType.Smtp">
            <summary>
            Smtp形式 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.EmailServiceType.Text">
            <summary>
            文本形式 
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.ExcelFileType">
            <summary>
            Excel文件类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.ExcelFileType.InvalidExcelFile">
            <summary>
            不是有效的Excel文件，文件名无效 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.ExcelFileType.Xlsx">
            <summary>
            XLSX类型 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.ExcelFileType.Xls">
            <summary>
            XLS类型 
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.OptionResultType">
            <summary>
            请求结果类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.None">
            <summary>
            未做任何操作
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.Ok">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.Fail">
            <summary>
            操作失败
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.Error">
            <summary>
            内部异常
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.Logout">
            <summary>
            登录超时
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.NoPermission">
            <summary>
            权限不足
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.NoData">
            <summary>
            数据不存在
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.NoNetWork">
            <summary>
            网络无效
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.InvalidParm">
            <summary>
            参数无效
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.QueryNoData">
            <summary>
            无数据
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.DoNothing">
            <summary>
            无任何操作
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.BadRequest">
            <summary>
            坏请求
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.BodyNoParm">
            <summary>
            Body无参数
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.OptionResultType.UrlNoParm">
            <summary>
            Url无参数
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.RemoteServiceType">
            <summary>
            远程Web服务类型
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RemoteServiceType.UnKnonw">
            <summary>
            默认,请选择
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RemoteServiceType.WebService">
            <summary>
            Web服务
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RemoteServiceType.WcfService">
            <summary>
            WCF服务
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RemoteServiceType.WebApi">
            <summary>
            WebApi服务
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RemoteServiceType.Ftp">
            <summary>
            Ftp服务
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.RunEnvironmentalType">
            <summary>
            远程WebService运行的环境类型:开发，测试，正式
            
            </summary>
            
            <remarks>
            特定场合下使用
            </remarks>
        </member>
        <member name="F:Edu.Framework.Enums.RunEnvironmentalType.Unknown">
            <summary>
            默认,请选择
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RunEnvironmentalType.Development">
            <summary>
            开发环境
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RunEnvironmentalType.Test">
            <summary>
            测试环境
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.RunEnvironmentalType.Formal">
            <summary>
            正式环境
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.SmtpRecieverTypes">
            <summary>
            Smtp接收类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.SmtpRecieverTypes.TO">
            <summary>
            接收 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.SmtpRecieverTypes.Cc">
            <summary>
            抄送 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.SmtpRecieverTypes.Bcc">
            <summary>
            隐藏抄送 
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.VerificationType">
            <summary>
            Web服务身份验证方式
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.VerificationType.None">
            <summary>
            默认,请选择
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.VerificationType.NotNeed">
            <summary>
            无需认证
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.VerificationType.Key">
            <summary>
            KEY
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.VerificationType.UsernameAndPassword">
            <summary>
            使用用户名和密码验证
            </summary>
        </member>
        <member name="T:Edu.Framework.Enums.WcfBindingType">
            <summary>
            WCF服务绑定类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Basichttpbinding">
            <summary>
            使用HTTP/HTTPS协议， 用于把 WCF 服务当作 ASMX Web 服务。用于兼容旧的Web ASMX 服务 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Netnamedpipebinding">
            <summary>
            使用IPC协议 使用命名管道进行安全、可靠、高效的单机服务通讯方式 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Netpeertcpbinding">
            <summary>
            使用 P2P 协议在多机器间通讯 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Nettcpbinding">
            <summary>
            使用 TCP 协议，用于在局域网(Intranet)内跨机器通信。 有几个特点：可靠性、事务支持和安全，优化了 WCF 到 WCF 的通信。 限制是服务端和客户端都必须使用 WCF 来实现 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Wsdualhttpbinding">
            <summary>
            使用HTTP协议 和 WSHttpBinding 相比，它支持 duplex 类型的服务 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Wsfederationhttpbinding">
            <summary>
            WS-Federation 安全通讯协议 
            </summary>
        </member>
        <member name="F:Edu.Framework.Enums.WcfBindingType.Wshttpbinding">
            <summary>
            使用HTTP/HTTPS协议 比 BasicHttpBinding 更加安全，通常用于 non-duplex 服务通讯 
            </summary>
        </member>
        <member name="T:Edu.Framework.Exceptions.NoFieldException">
            <summary>
            字段信息
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoFieldException.FieldName">
            <summary>
            字段名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoFieldException.Message">
            <summary>
            消息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Exceptions.NoFieldException.#ctor(System.String)">
            <summary>
            构造函数
            
            </summary>
            <param name="fieldName">私有字段名</param>
        </member>
        <member name="T:Edu.Framework.Exceptions.NoMethodException">
            <summary>
            对象方法异常
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoMethodException.MethodName">
            <summary>
            方法名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoMethodException.Message">
            <summary>
            消息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Exceptions.NoMethodException.#ctor(System.String)">
            <summary>
            构造函数
            
            </summary>
            <param name="methodName"/>
        </member>
        <member name="T:Edu.Framework.Exceptions.NoPropertyException">
            <summary>
            属性异常
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoPropertyException.PropertyName">
            <summary>
            属性名
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Exceptions.NoPropertyException.Message">
            <summary>
            错误消息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Exceptions.NoPropertyException.#ctor(System.String)">
            <summary>
            构造函数
            
            </summary>
            <param name="propertyName"/>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.DLinqSerializer">
            <summary>
            dependency : System.Data.Linq (DLINQ)
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.DLinqSerializer.SerializeQuery(System.Linq.IQueryable)">
            <summary>
            序列号查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.DLinqSerializer.DeserializeQuery(System.Data.Linq.DataContext,System.Xml.Linq.XElement)">
            <summary>
            反序列化查询
            </summary>
            <param name="dc"></param>
            <param name="rootXml"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.Evaluator">
            <summary>
            计算器
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation, replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation, replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Evaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Anything which involves has a sub-Expression as ParameterExpression, such as a MemberExpression,
            will not pass this check.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates, replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Evaluator.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Attempt to evaluate each node upon visiting. If the node is a "candidate" (Nominator),
            then we replace the Expression node with its evaluated form.
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Evaluator.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            If a child node cannot be evaluated, then its parent can't either. 
            A Expression node will fail to be a candidate if it (or a sub-Expression) has a ParameterExpression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.ExpressionSerializer">
            <summary>
            表达式序列化
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.GenerateXmlFromExpressionCore(System.Linq.Expressions.Expression)">
            <summary>
            从表达式生成XML
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            反序列化
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.Deserialize``1(System.Xml.Linq.XElement)">
            <summary>
            反序列化
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.TryCustomDeserializers(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
            <summary>
            Uses first applicable custom deserializer, then returns.
            Does not attempt to use all custom deserializers.
            </summary>
            <param name="xml"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.ParseConstantFromElement(System.Xml.Linq.XElement,System.String,System.Type)">
            <summary>
            returns object for use in a call to Expression.Constant(object, Type)
            </summary>
            <param name="xml"></param>
            <param name="elemName"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="F:Edu.Framework.ExpressionSerialization.ExpressionSerializer.primitiveTypes">
            <summary>
            generate XML attributes for these primitive Types.
            </summary>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.ExpressionSerializer.Converters">
            <summary>
            自定义表达式XML转换
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.#ctor(Edu.Framework.ExpressionSerialization.TypeResolver,System.Collections.Generic.IEnumerable{Edu.Framework.ExpressionSerialization.CustomExpressionXmlConverter})">
            <summary>
            构造函数
            </summary>
            <param name="resolver"></param>
            <param name="converters"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.Serialize(System.Linq.Expressions.Expression)">
            <summary>
            序列化
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.TryCustomSerializers(System.Linq.Expressions.Expression,System.Xml.Linq.XElement@)">
            <summary>
            Uses first applicable custom serializer, then returns.
            Does not attempt to use all custom serializers.
            </summary>
            <param name="e"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.GenerateXmlFromObject(System.String,System.Object)">
            <summary>
            Called from somewhere on call stack... from ConstantExpression.Value
            Modified since original code for this method was incorrectly getting the value as 
            .ToString() for non-primitive types, which ExpressionSerializer was 
            unable to later parse back into a value (ExpressionSerializer.ParseConstantFromElement).
            </summary>
            <param name="propName"></param>
            <param name="value">ConstantExpression.Value</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.ExpressionSerializer.GenerateXmlFromKnownTypes(System.String,System.Object,System.Type)">
            <summary>
            For use with ConstantExpression.Value
            </summary>
            <param name="xName"></param>
            <param name="instance"></param>
            <param name="knownType"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.IQueryService">
            <summary>
            WCF Web HTTP (REST) query service. 
            Derive your ServiceContract from this.
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.IQueryService.ExecuteQuery(System.Xml.Linq.XElement)">
            <summary>
            执行查询
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.KnownTypeExpressionXmlConverter">
            <summary>
            已知类型表达式XML转换
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.KnownTypeExpressionXmlConverter.#ctor(Edu.Framework.ExpressionSerialization.TypeResolver)">
            <summary>
            构造函数
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.KnownTypeExpressionXmlConverter.TryDeserialize(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
             <summary>
            code originally in method ParseConstantFromElement(XElement xml, string elemName, Type expectedType)
             </summary>
             <param name="x"></param>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.KnownTypeExpressionXmlConverter.TrySerialize(System.Linq.Expressions.Expression,System.Xml.Linq.XElement@)">
            <summary>
            尝试序列号
            </summary>
            <param name="e"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.LinqHelper">
            <summary>
            Linq帮助类
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.WhereCall(System.Linq.Expressions.LambdaExpression,System.Collections.IEnumerable,System.Type)">
            <summary>
            何处调用
            </summary>
            <param name="wherePredicate"></param>
            <param name="sourceCollection"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.CastToGenericEnumerable(System.Collections.IEnumerable,System.Type)">
            <summary>
            Casts a collection, at runtime, to a generic (or strongly-typed) collection.
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.CastToGenericList(System.Collections.IEnumerable,System.Type)">
            <summary>
            转换常规List
            </summary>
            <param name="sourceobjects"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.WhereCall``1(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            何处调用
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="wherePredicate"></param>
            <param name="sourceCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.FuncToExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            also see: http://stackoverflow.com/questions/5862266/how-is-a-funct-implicitly-converted-to-expressionfunct
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.FuncToExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            表达式装箱
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.GetMemberAccess``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获得成员主体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.GetMemberAccess``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获得成员主体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.GetMethodCallExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            对静态方法或实例方法的调用
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            执行
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.RunTimeConvert``2(``1,System.Type)">
            <summary>
            运行时间转换
            </summary>
            <typeparam name="D"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="src"></param>
            <param name="convertExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.RunTimeConvert(System.Object,System.Type)">
            <summary>
            运行时间转换
            </summary>
            <param name="instance"></param>
            <param name="convertExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.LinqHelper.CreateInstance(System.Type)">
            <summary>
            创建实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.Query`1">
            <summary>
            Explicit interface implementation of IQueryable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Query`1.#ctor">
            <summary>
            查询
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Query`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            查询
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Query`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            查询
            </summary>
            <param name="provider"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Query`1.GetEnumerator">
            <summary>
            on the call to any of the System.Linq extension methods on IEnumerable{T}, this
            method will get called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.Query`1.ToString">
            <summary>
            in Debug, this is called implicitly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.QueryCreator">
            <summary>
            Creates (IQueryable) Query instances that actually have a backing data source.
            
            this class is almost analagous to the DLinqSerializer class in that it works with 
            the CustomExpressionXmlConverter by providing the data source to the Query (IQueryable)
            when it is deserialized.
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryCreator.#ctor">
            <summary>
            查询构造器
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryCreator.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Relies upon a function to get objects. Could alternatively have required
            an interface as a ctor argument, but a fn. parameters seems even more generic an approach.
            If we only need 1 method, then why require an entire interface? Also, this way allows a static class method
            to be used.
            </summary>
            <param name="fngetobjects">function that returns a dynamic 
            which is the IEnumerable`1 of element type that is the Type argument to the function (fngetobjects).</param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryCreator.CreateQuery(System.Type)">
            <summary>
            called during deserialization.
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryCreator.GetIEnumerableOf(System.Type)">
            <summary>
            This method is important to how this IQueryProvider works, for returning the IEnumerable from
            which we generate the IQueryable and IQueryProvider to delegate the Execute(Expression) call to.
            
            In practice this would be a call to the DAL.
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryCreator.CreateDefaultInstance(System.Type)">
            <summary>
            creates instance using default ctor
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.QueryExpressionXmlConverter">
            <summary>
            查询表达式XML转化器
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryExpressionXmlConverter.#ctor(Edu.Framework.ExpressionSerialization.QueryCreator,Edu.Framework.ExpressionSerialization.TypeResolver)">
            <summary>
            构造函数
            </summary>
            <param name="creator"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryExpressionXmlConverter.TryDeserialize(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
            <summary>
            Upon deserialization replace the Query (IQueryable) in the Expression tree with a new Query that has a different ConstantExpression.
            Re-create the Query, but with a different server-side IQueryProvider.
            For IQueryProvder, we just create a Linq.EnumerableQuery`1.
            
            Need both a working IQueryProvider and a new Query with ConstantExpression equal to actual data.
            </summary>
            <param name="expressionXml"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryExpressionXmlConverter.TrySerialize(System.Linq.Expressions.Expression,System.Xml.Linq.XElement@)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.CustomExpressionXmlConverter">
            <summary>
            自定义表达式XML转换
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.CustomExpressionXmlConverter.TryDeserialize(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
            <summary>
            反序列化
            </summary>
            <param name="expressionXml"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.CustomExpressionXmlConverter.TrySerialize(System.Linq.Expressions.Expression,System.Xml.Linq.XElement@)">
            <summary>
            序列化
            </summary>
            <param name="expression"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.QueryProvider">
            <summary>
            用于创建和执行 System.Linq.IQueryable 对象所描述的查询的方法。
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryProvider.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryProvider.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            获取查询文本
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.QueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            执行
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.RemoteProvider">
            <summary>
            IQueryProvider that has a (remote) Web HTTPWCF service as a backing data source.
            (analagous to the RemoteTable class).
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.RemoteProvider.#ctor(Edu.Framework.ExpressionSerialization.WebHttpClient{Edu.Framework.ExpressionSerialization.IQueryService})">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.RemoteProvider.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            获得查询文本
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.RemoteProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            This makes an asynchronous network request.
            Silverlight users can expect this call to return synchronously, 
            but will need to call this from a thread separate from the main UI thread.
            (For example, enclose this method call within ThreadPool.QueueUserWorkItem.)
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.TypeConvert">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeConvert.GetValue(System.Type,System.String,System.Object,System.Object@)">
            <summary>
            根据实体类动态转换值类型,并输出转换后的值
            </summary>
            <param name="type">实体类型</param>
            <param name="propName">属性名</param>
            <param name="value">原始值</param>
            <param name="oVal">输出值</param>
            <returns>该属性对应的数据类型</returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeConvert.IsNullableType(System.Type)">
            <summary>
            判定是否为可空类型
            </summary>
            <param name="theType">类型</param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.TypeResolver">
            <summary>
            类型解析
            </summary>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.TypeResolver.knownTypes">
            <summary>
            KnownTypes for DataContractSerializer. Only needs to hold the element type, not the collection or array type.
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Relying on the constructor only, to load all possible (including IEnumerable, IQueryable, Nullable, Array) Types 
            into memory, may not scale well.
            </summary>
            <param name="assemblies"></param>
            <param name="knownTypes"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.HasMappedKnownType(System.Type)">
            <summary>
            是否有映射已知类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.HasMappedKnownType(System.Type,System.Type@)">
            <summary>
            Checks if the input Type is "mapped" or otherwise somehow related (e.g. Array) to a KnownType found in this.KnownTypes.
            </summary>
            <param name="input"></param>
            <param name="knownType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetType(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            获取类型
            </summary>
            <param name="typeName"></param>
            <param name="genericArgumentTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetType(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            获得方法信息
            </summary>
            <param name="declaringType"></param>
            <param name="name"></param>
            <param name="parameterTypes"></param>
            <param name="genArgTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetOrCreateAnonymousTypeFor(System.String,Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair[],Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair[])">
            <summary>
            获得或创建 无名类型
            </summary>
            <param name="name"></param>
            <param name="properties"></param>
            <param name="ctr_params"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetElementType(System.Type)">
            <summary>
            获得元素类型
            </summary>
            <param name="collectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.IsIEnumerableOf(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="enumerableType">the candidate enumerable Type in question</param>
            <param name="elementType">is the candidate type a IEnumerable of elementType</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.HasBaseType(System.Type,System.Type)">
            <summary>
            判断是否有直接从 System.Type继承的类型。
            </summary>
            <param name="thisType"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetBaseTypes(System.Type)">
            <summary>
            获得基本类型
            </summary>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.GetDerivedTypes(System.Type)">
            <summary>
            For determining KnownType(s) to declare on a DataContract
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.IsNullableType(System.Type)">
            <summary>
            判断是否为空类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.HasInheritedProperty(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            判断是否有继承属性
            </summary>
            <param name="declaringType"></param>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.ToGenericTypeFullNameString(System.Type)">
            <summary>
            返回一般类型完整名称
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.ToGenericTypeNameString(System.Type)">
            <summary>
            返回一般类型名称
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair">
            <summary>
            名称 类型对
            </summary>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair.GetHashCode">
            <summary>
            获得哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.TypeResolver.NameTypePair.Equals(System.Object)">
            <summary>
            判断是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.WebHttpClient`1">
            <summary>
            WebHttp客户端
            </summary>
            <typeparam name="TChannel"></typeparam>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.WebHttpClient`1.knownTypes">
            <summary>
            已知类型
            </summary>
        </member>
        <member name="P:Edu.Framework.ExpressionSerialization.WebHttpClient`1.baseAddress">
            <summary>
            基础地址
            </summary>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpClient`1.#ctor(System.Uri,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="baseAddress"></param>
            <param name="knownTypes"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpClient`1.SynchronousCall``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            同步调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="methodcall"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpClient`1.SynchronousCall(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Type)">
            <summary>
            同步调用
            </summary>
            <param name="methodcall"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.ExpressionSerialization.WebHttpRequestClient">
            <summary>
            this can be a base class for the evental client that implements IWebHttpService
            </summary>		
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.SynchronousCall``2(System.Uri,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            同步调用
            </summary>
            <typeparam name="TChannel"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="baseAddress"></param>
            <param name="methodcall"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.SynchronousCall``2(System.Uri,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Type)">
            <summary>		
            This call is handled as synchronous, BUT it MUST be invoked on a thread separate from the main UI thread.
            Assumes that the OperationContract's parameters is exactly 1 params object[]. This is because there is no 
            apparent way to send multiple different parameters in HTTP POST in Silverlight. Tuple cannot be serialized
            in Silverlight.
            
            Only handles HTTP POST requests (WebInvoke), not HTTP GET (WebGet). This is because WebGet only appears to accept
            string parameters. 
            
            If I later come across an alternative way to pass multiple non-string parameters to a WCF service method, 
            </summary>
            <typeparam name="TChannel"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="baseAddress"></param>
            <param name="methodcall"></param>
            <param name="returnType">user's desired return element Type, as either a single instance or in a collection. May not be what's declared on OperationContract (e.g. if return Type is object[])</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.CreateHttpWebRequest(System.Uri,System.Object,System.Action{System.IO.Stream},System.String,System.ServiceModel.Web.WebMessageFormat,System.ServiceModel.Web.WebMessageFormat,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            创建HttpWeb响应
            </summary>
            <param name="absoluteUri"></param>
            <param name="instance"></param>
            <param name="callback"></param>
            <param name="method"></param>
            <param name="requestFormat"></param>
            <param name="responseFormat"></param>
            <param name="knownTypes"></param>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.Deserialize(System.Type,System.IO.Stream,System.ServiceModel.Web.WebMessageFormat)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="stream"></param>
            <param name="responseformat"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.Deserialize``1(System.IO.Stream,System.ServiceModel.Web.WebMessageFormat)">
            <summary>
            反序列号
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="responseformat"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.ExpressionSerialization.WebHttpRequestClient.getArguments(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            assumes a single params object[] argument.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Extensions.DbContextExtensions">
            <summary>
            DbContext扩展
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ExecuteProcedure``1(System.Data.Entity.DbContext,System.Boolean,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行存储过程返回自定类型的集合
            
            </summary>
            <typeparam name="T">返回的项的类型</typeparam><param name="context"/><param name="proc">是否是存储过程</param><param name="cmdText">sql或存储过程名称</param><param name="parameters">参数</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ExecuteSimpleProcedure(System.Data.Entity.DbContext,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Oracle存储过程没有返回值，请从输出参数中提取
            
            </summary>
            <param name="context">EF上下文对象</param><param name="cmdText">过程名</param><param name="parameters">存储过程参数</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.PrepareCommand(System.Data.Common.DbConnection,System.String,System.Boolean,System.Data.Common.DbParameter[])">
            <summary>
            创建DbCommand
            
            </summary>
            <param name="conn"/><param name="cmdText"/><param name="proc"/><param name="parameters"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ExecuteReader(System.Data.Common.DbConnection,System.Boolean,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行DbDataReader
            
            </summary>
            <param name="conn"/><param name="proc"/><param name="cmdText"/><param name="parameters"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.GetProperties(System.Type)">
            <summary>
            获取指定类型属性
            
            </summary>
            <param name="type"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchDelete``1(System.Data.Entity.Core.Objects.ObjectSet{``0},System.Linq.IQueryable{``0})">
            <summary>
            使用 查询筛选要删除的行的查询语句 执行删除语句.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="query">IQueryable对象.</param>
            <returns>
            返回删除的行数.
            </returns>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                         变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchDelete``1(System.Data.Entity.Core.Objects.ObjectSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用一个表达式来执行一个删除语句来过滤要删除的行.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="filterExpression">过滤表达式.</param>
            <returns>
            返回删除的行数.
            </returns>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var db = new TrackerEntities();
                        string emailDomain = "@test.com";
                        int count = db.Users.Delete(u => u.Email.EndsWith(emailDomain));
                        ]]>
            </code>
            
            </example>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchDelete``1(System.Data.Entity.DbSet{``0},System.Linq.IQueryable{``0})">
            <summary>
            使用一个表达式来执行一个删除语句来过滤要删除的行.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="query">IQuery对象.</param>
            <returns>
            返回删除的行数.
            </returns>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchDelete``1(System.Data.Entity.DbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用一个表达式来执行一个删除语句来过滤要删除的行.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="filterExpression">过滤表达式.</param>
            <returns>
            返回删除的行数.
            </returns>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var db = new TrackerContext();
                        string emailDomain = "@test.com";
                        int count = db.Users.Delete(u => u.Email.EndsWith(emailDomain));
                        ]]>
            </code>
            
            </example>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchDelete``1(System.Data.Entity.Core.Objects.ObjectContext,EntityFramework.Mapping.EntityMap,System.Data.Entity.Core.Objects.ObjectQuery{``0})">
            <summary>
            删除数据
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="query">IQuery对象.</param><param name="objectContext">对象上下文</param><param name="entityMap">实体映射</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchUpdate``1(System.Data.Entity.Core.Objects.ObjectSet{``0},System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            使用一个表达式来执行更新.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="query">IQuery对象.</param><param name="updateExpression">更新表达式.</param>
            <returns>
            返回更新行数.
            </returns>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchUpdate``1(System.Data.Entity.Core.Objects.ObjectSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            使用表达式执行部分更新
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="filterExpression">过滤表达式.</param><param name="updateExpression">部分更新表达式.</param>
            <returns>
            更新行数.
            </returns>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var db = new TrackerEntities();
                        string emailDomain = "@test.com";
                        int count = db.Users.Update(
                          u => u.Email.EndsWith(emailDomain),
                          u => new User { IsApproved = false, LastActivityDate = DateTime.Now });
                        ]]>
            </code>
            
            </example>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchUpdate``1(System.Data.Entity.DbSet{``0},System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            使用表达式执行部分更新
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="query">IQuery对象.</param><param name="updateExpression">部分更新表达式.</param>
            <returns>
            更新行数.
            </returns>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchUpdate``1(System.Data.Entity.DbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            执行部分更新.
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="source">DbSet上下文.</param><param name="filterExpression">过滤表达式.</param><param name="updateExpression">更新表达式.</param>
            <returns>
            更新行数.
            </returns>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var db = new TrackerContext();
                        string emailDomain = "@test.com";
                        int count = db.Users.Update(
                          u => u.Email.EndsWith(emailDomain),
                          u => new User { IsApproved = false, LastActivityDate = DateTime.Now });
                        ]]>
            </code>
            
            </example>
            
            <remarks>
            执行此方法时，立即在数据库提供程序上执行语句.
                        变化不会反应到数据库上下文中，也不会进行跟踪
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.BatchUpdate``1(System.Data.Entity.Core.Objects.ObjectContext,EntityFramework.Mapping.EntityMap,System.Data.Entity.Core.Objects.ObjectQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            更新数据
            
            </summary>
            <typeparam name="TEntity">实体类型.</typeparam><param name="query">IQuery对象.</param><param name="objectContext">对象上下文</param><param name="entityMap">实体映射</param><param name="updateExpression">更新表达式</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.GetStore(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary> 
            获取 对象上下文元组对象 
            </summary> 
            <param name="objectContext"></param> 
            <returns></returns> 
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.GetSelectSql``1(System.Data.Entity.Core.Objects.ObjectQuery{``0},EntityFramework.Mapping.EntityMap,System.Data.Common.DbCommand)">
            <summary>
            获取查询SQL语句
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="query"/><param name="entityMap">实体映射实例</param><param name="command"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ToJson(System.Object)">
            <summary>
            把对象序列化为JSON
            </summary>
            <param name="entity">对象</param>
            <returns>
            JSON字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ToJson(System.Object,Newtonsoft.Json.ReferenceLoopHandling)">
            <summary>
            把对象序列化为JSON
            
            </summary>
            <param name="entity">对象</param><param name="referenceLoopHandling">对自引用处理</param>
            <returns>
            JSON字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.FromJson``1(System.String)">
            <summary>
            反序列化对象
            
            </summary>
            <typeparam name="T">反序列化类型</typeparam><param name="json">JSON字符串</param>
            <returns>
            反序列化后的对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.ToXml``1(``0)">
            <summary>
            把对象序列化为XML字符串
            
            </summary>
            <typeparam name="T">将要序列化的对象的类型</typeparam><param name="obj">任意对象</param>
            <returns>
            标准的XML格式字符
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbContextExtensions.FromXml``1(System.String)">
            <summary>
            把字XML符串序反列化为对象
            
            </summary>
            <typeparam name="T">反序列化类型</typeparam><param name="xml">XML字符串</param>
            <returns>
            XML对应的对象
            </returns>
        </member>
        <member name="T:Edu.Framework.Extensions.DbParameterExtensions">
            <summary>
            创建SqlServer或Oracle参数
                        note: Framework不引用Oracle驱动, 只能这么创建
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.DbParameterExtensions.CreateParameter(System.String,System.Object,Edu.Framework.Enums.DataBaseType)">
            <summary>
            创建DbParameter
            
            </summary>
            <param name="parmName">参数名</param><param name="val">参数值</param><param name="dbType">DatabaseType</param>
            <returns>
            返回DbParameter实例
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbParameterExtensions.CreateParameter(System.String,System.Int32,System.Data.ParameterDirection,Edu.Framework.Enums.DataBaseType)">
            <summary>
            创建DbParameter
            
            </summary>
            <param name="parmName">参数名</param><param name="parmType">参数类型</param><param name="direction">参数输入输出方向</param><param name="dbType">DatabaseType</param>
            <returns>
            返回DbParameter实例
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.DbParameterExtensions.CreateParameter(System.String,System.Int32,System.Object,System.Data.ParameterDirection,Edu.Framework.Enums.DataBaseType)">
            <summary>
            创建DbParameter
            
            </summary>
            <param name="parmName">参数名</param><param name="parmType">参数类型</param><param name="val">参数值</param><param name="direction">参数输入输出方向</param><param name="dbType">DatabaseType</param>
            <returns>
            返回DbParameter实例
            </returns>
        </member>
        <member name="T:Edu.Framework.Extensions.ExpressExtensions">
            <summary>
            表达式扩展
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.GenerateSelector``1(System.String,System.Type@)">
            <summary>
            构造如下Lambda: x =&gt; x.Prpperty or x =&gt; x.Entity.Property
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="propertyName">属性名</param><param name="resultType">返回属性类型</param>
            <returns>
            Lambda表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.GenerateMethodCall``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            构造方法调用表达式
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">集合</param><param name="methodName">方法名</param><param name="fieldName">字段名</param>
            <returns>
            方法回调表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            依据字段名排序(结果同OrderBy)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            依据字段名排序(结果同OrderByDescending)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            依据字段名排序(结果同ThenBy)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            依据字段名排序(结果同ThenByDescending)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderBySortExpression``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            根据指定的排序表达式排序
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="sortExpression">排序表达式字符串(eg:order by fieldName desc)</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderByIf``1(System.Linq.IQueryable{``0},System.Boolean,System.String)">
            <summary>
            依据字段名排序(结果同OrderBy)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="predicate">如果true,则执行排序</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderByDescendingIf``1(System.Linq.IQueryable{``0},System.Boolean,System.String)">
            <summary>
            依据字段名排序(结果同OrderByDescending)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="predicate">如果true,则执行排序</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.ThenByIf``1(System.Linq.IOrderedQueryable{``0},System.Boolean,System.String)">
            <summary>
            依据字段名排序(结果同ThenBy)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="predicate">如果true,则执行排序</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.ThenByDescendingIf``1(System.Linq.IOrderedQueryable{``0},System.Boolean,System.String)">
            <summary>
            依据字段名排序(结果同ThenByDescending)
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="predicate">如果true,则执行排序</param><param name="fieldName">排序字段</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.OrderBySortExpressionIf``1(System.Linq.IQueryable{``0},System.Boolean,System.String)">
            <summary>
            根据指定的排序表达式排序
            
            </summary>
            <typeparam name="TEntity">实体类型</typeparam><param name="source">要排序的集合</param><param name="predicate">如果true,则执行排序</param><param name="sortExpression">排序表达式字符串(eg:order by fieldName desc)</param>
            <returns>
            排序的操作结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.True``1">
            <summary>
            创建一个值恒为 <c>true</c> 的表达式。
            
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>
            一个值恒为 <c>true</c> 的表达式。
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.False``1">
            <summary>
            创建一个值恒为 <c>false</c> 的表达式。
            
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>
            一个值恒为 <c>false</c> 的表达式。
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.Or``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            使用 Expression.OrElse 的方式拼接两个 System.Linq.Expression。
            
            </summary>
            <typeparam name="T">表达式方法类型</typeparam><param name="left">左边的 System.Linq.Expression 。</param><param name="right">右边的 System.Linq.Expression。</param>
            <returns>
            拼接完成的 System.Linq.Expression。
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.And``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            使用 Expression.AndAlso 的方式拼接两个 System.Linq.Expression。
            
            </summary>
            <typeparam name="T">表达式方法类型</typeparam><param name="left">左边的 System.Linq.Expression 。</param><param name="right">右边的 System.Linq.Expression。</param>
            <returns>
            拼接完成的 System.Linq.Expression。
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.MakeBinary``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            使用自定义的方式拼接两个 System.Linq.Expression。
            
            </summary>
            <typeparam name="T">表达式方法类型</typeparam><param name="left">左边的 System.Linq.Expression 。</param><param name="right">右边的 System.Linq.Expression。</param><param name="func"/>
            <returns>
            拼接完成的 System.Linq.Expression。
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.MakeBinary(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            拼接两个
                        <paramref><name>System.Linq.Expression</name></paramref>  ，两个 <paramref><name>System.Linq.Expression</name></paramref>  的参数必须完全相同。
            
            </summary>
            <param name="left">左边的 <paramref><name>System.Linq.Expression</name></paramref></param><param name="right">右边的 <paramref><name>System.Linq.Expression</name></paramref></param><param name="func">表达式拼接的具体逻辑</param>
            <returns>
            拼接完成的 <paramref><name>System.Linq.Expression</name></paramref>
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,``1)">
            <summary>
            扩展Between 操作符
                        使用 var query = db.People.Between(person =&gt; person.Age, 18, 21);
            
            </summary>
            <typeparam name="T">源数据类型</typeparam><typeparam name="TKey">被筛选字段类型</typeparam><param name="source">源数据</param><param name="keySelector">模型属性选择器</param><param name="low">最小值</param><param name="high">最大值</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.Between``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``1,``1)">
            <summary>
            扩展Between 操作符
                        使用 var query = PeopleExpression.Between(person =&gt; person.Age, 18, 21);
            
            </summary>
            <typeparam name="T">源数据类型</typeparam><typeparam name="TKey">被筛选字段类型</typeparam><param name="keySelector">源数据</param><param name="low">最小值</param><param name="high">最大值</param>
            <returns>
            返回表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``2(System.Collections.Generic.IList{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        T,TSource可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``2(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        T,TSource可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``2(System.Collections.Generic.ICollection{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        T,TSource可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``3(System.Collections.Generic.IList{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">源数据类型</typeparam><typeparam name="TQuery">查询条件类型</typeparam><typeparam name="TOutput">查询结果类型</typeparam><param name="dataSource">数据源</param><param name="selector">查询表达式</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``3(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">数据源数据类型</typeparam><typeparam name="TQuery">数据查询模型</typeparam><typeparam name="TOutput">查询结果模型</typeparam><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToList``3(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">数据源数据类型</typeparam><typeparam name="TQuery">数据查询模型</typeparam><typeparam name="TOutput">查询结果模型</typeparam><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            泛型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``2(System.Collections.Generic.IList{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        T,TSource可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``2(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        T,TSource可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``2(System.Collections.Generic.ICollection{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="T">筛选器数据类型，查询结果返回类型</typeparam><typeparam name="TSource"/><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``3(System.Collections.Generic.IList{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">数据源数据类型</typeparam><typeparam name="TQuery">数据查询模型</typeparam><typeparam name="TOutput">查询结果模型</typeparam><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``3(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">数据源数据类型</typeparam><typeparam name="TQuery">数据查询模型</typeparam><typeparam name="TOutput">查询结果模型</typeparam><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ExpressExtensions.QueryToEnumerable``3(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}})">
            <summary>
            数据查询
                        基于Automapper实现表达式的转换
                        TQuery,TSource可通过Automapper需要实现相互转换映射
                        TSource,TOutput可通过Automapper需要实现相互转换映射
                        使用场景：查询条件模型和查询结果模型不是同一类型
            
            </summary>
            <typeparam name="TSource">数据源数据类型</typeparam><typeparam name="TQuery">数据查询模型</typeparam><typeparam name="TOutput">查询结果模型</typeparam><param name="selector">选择器</param><param name="dataSource">数据源类型</param>
            <returns>
            IEnumerable《T》
            </returns>
        </member>
        <member name="T:Edu.Framework.Extensions.ObjectExtensions">
            <summary>
            对象扩展
            
            </summary>
            
            <summary>
            验证扩展
            
            </summary>
            
            <remarks>
            验证匹配
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Description(System.Type,System.Boolean)">
            <summary>
            获取Description信息
            
            </summary>
            <param name="type">当前类型</param><param name="isUpper">描述信息是否转换为大写</param>
            <returns>
            描述信息
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对IEnumerable对象进行action处理并返回处理后的值
            
            </summary>
            <typeparam name="T">IEnumerable对象源类型</typeparam><param name="source">源IEnumerable对象</param><param name="action">匿名处理委托</param>
            <returns>
            遍历处理每条数据
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            把IEnumerable中的不包含在key中的对象转换到List对象,并过滤掉重复的对象
            
            </summary>
            <typeparam name="T">源对象类型</typeparam><typeparam name="TKey">识别KEY</typeparam><param name="source">源数据对象</param><param name="key">比较集合</param>
            <returns>
            转换后的集合
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Description(System.Enum,System.Boolean)">
            <summary>
            获取枚举信息
            
            </summary>
            <param name="eEnum">枚举</param><param name="isUpperTableName">枚举描述是否转换为大写</param>
            <returns>
            枚举描述信息
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetCustomerType``2(System.Enum,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            获取自定义Attribute.Value对象
            
            </summary>
            <typeparam name="TInut">输入项类型</typeparam><typeparam name="TOut">输出项类型</typeparam><param name="eEnum"/><param name="selector">筛选器</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetAttributes(System.Enum,System.Type)">
            <summary>
            获取枚举指定类型的特性实例集合
            
            </summary>
            <param name="eEnum">枚举类子项</param><param name="attributeType">DescriptionAttribute属性类或其自定义属性类 类型，例如：typeof(DescriptionAttribute)</param>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsNotPostBack(System.Web.HttpRequestBase)">
            <summary>
            是否初次加载(True 初次加载、False POST数据)
            
            </summary>
            <param name="request">HttpRequestBase</param>
            <returns>
            bool
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetSiteRootUrl(System.Web.HttpRequestBase)">
            <summary>
            站点跟路径
            
            </summary>
            <param name="request">HttpRequestBase对象</param>
            <returns>
            返回当前站点的跟路径的完全路径
            
            </returns>
            
            <remarks>
            返回如http://www.tjdns.com:8021这种格式
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsComObject``1(``0)">
            <summary>
            判定该对象是否ComObject对象
            
            </summary>
            <typeparam name="T">数据类型</typeparam><param name="instance">数据实例</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToPlural(System.String)">
            <summary>
            单词变成复数形式
            
            </summary>
            <param name="word">单数字符串</param>
            <returns>
            复数字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSingular(System.String)">
            <summary>
            单词变成单数形式
            
            </summary>
            <param name="word">复数字符串</param>
            <returns>
            单数字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToUpper(System.String,Edu.Framework.Enums.DataBaseType)">
            <summary>
            把数据库标识符转换为大写(重点服务Oracle数据库)
            
            </summary>
            <param name="word">关键字</param><param name="dbType">数据库类型</param>
            <returns>
            全大写字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToChineseFromNumber(System.String)">
            <summary>
            汉字转数字
            
            </summary>
            <param name="inputChinese">带汉字的字符串</param>
            <returns>
            带数字的字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToNumberFromChinese(System.String)">
            <summary>
            数字转汉字
            
            </summary>
            <param name="numberStr">带数字的字符串</param>
            <returns>
            带汉字的字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ClassName``1(``0)">
            <summary>
            获取Class类名
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="objTarget">对象</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.NameSpace``1(``0)">
            <summary>
            获取Class命名空间
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="objTarget">对象</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.TrimSpaces(System.String)">
            <summary>
            去掉string 1个以上的空格
            
            </summary>
            <param name="source">string</param>
            <returns>
            string
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            把泛型字符串用逗号连接为字符串
            
            </summary>
            <param name="values">泛型对象</param>
            <returns>
            返回以符号,相连的字符
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            把泛型字符串用逗号连接为字符串
            
            </summary>
            <param name="values">泛型对象</param><param name="split">分隔符</param>
            <returns>
            返回以符号【split】相连的字符
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToMd5(System.String)">
            <summary>
            返回MD5加密字符串
            
            </summary>
            <param name="source">要加密的字符串</param>
            <returns>
            返回MD5加密的字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.HandleStr(System.String)">
            <summary>
            处理字符串
            
            </summary>
            <param name="str">需要处理的字符串 例如：1^2^3^</param>
            <returns>
            string[] 通过^拆分后的数组
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetContact(System.String,System.String)">
            <summary>
            返回符合条件的字符串数组
            
            </summary>
            <param name="empContact">手机号:15840060905;电话:025-45626587;QQ号:87655656</param><param name="findWhat">要查找那种联系方式</param>
            <returns>
            返回符合条件的字符串数组
            </returns>
            
            <remarks>
            empContract:规则 key1:value1;keye2:value2;key3:value3
                        findWhat:规则：即empContract中的key值
            
            </remarks>
            
            <remarks>
            本函数：主要为高速建设项目提供支持
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否是可空类型
            
            </summary>
            <param name="type">Type</param>
            <returns>
            true:为空对象,false不是空对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetUnNullableType(System.Type)">
            <summary>
            获取指定类型的非空类型 如 int? =&gt; int
            
            </summary>
            <param name="type">Type</param>
            <returns>
            返回如如 int? =&gt; int,int=&gt;int
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)">
            <summary>
            将当前对象转换到指定的Type
            
            </summary>
            <param name="value">要转换的值</param><param name="conversionType">目标值的类型</param>
            <returns>
            类型转换
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Serializable``1(``0)">
            <summary>
            序列化指定的类
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Deserialize``1(System.Byte[],System.Int32)">
            <summary>
            反序列化指定的字节流
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.Deserialize``1(System.Byte[])">
            <summary>
            反序列化(泛型)
            
            </summary>
            <typeparam name="T">目标类型</typeparam><param name="bty">原始字节数组</param>
            <returns>
            反序列化后类实例
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.SerializableAndEncrypt``1(``0)">
            <summary>
            序列化并加密
            
            </summary>
            <typeparam name="T">将要序列化的类型</typeparam><param name="t">原类实例</param>
            <returns>
            序列化并加密
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DecryptAndDerializable``1(System.String)">
            <summary>
            解密并还原成类
            
            </summary>
            <typeparam name="T">目标类类型</typeparam><param name="str">序列化字符串</param>
            <returns>
            还原并解密后的类
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.CastToFormUrlParams``1(``0)">
            <summary>
            把类属性转为Get请求Url参数
                        字符串会自动采用UTF-8编码
            
            </summary>
            <typeparam name="T">实体类型</typeparam><param name="reqInstance">实体实例</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostToWebApiV1``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostToWebApiV1``2(``0,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostsToWebApiV1``2(``0,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi请求集合数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostsToWebApiV1``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi请求集合数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostToWebApiV2``2(``0,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostToWebApiV2``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostsToWebApiV2``2(``0,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi请求集合数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.PostsToWebApiV2``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi请求集合数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetFromWebApiV1``1(Edu.Framework.Comm.WebApiRequest{``0})">
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DeleteFromWebApiV1``2(``0,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi删除数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DeleteFromWebApiV1``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi删除数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DeleteFromWebApiV2``2(``0,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            从WebApi删除数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DeleteFromWebApiV2``2(Edu.Framework.Comm.WebApiRequest{``0})">
            <summary>
            从WebApi删除数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.UploadToWebApi``2(``0,System.String,System.String,System.String,System.Collections.Hashtable,System.String)">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="request">请求参数实例</param><param name="webapiUrl">请求地址</param><param name="contactName">WebApi接口名</param><param name="headerKeyValues">Header请求头</param><param name="fileAbsPath">上传文件路径</param><param name="fileName">上传的文件命名</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.UploadToWebApi``2(Edu.Framework.Comm.WebApiRequest{``0},System.String,System.String)">
            <summary>
            从WebApi请求单条是数据
            
            </summary>
            <typeparam name="TInput">请求参数类型</typeparam><typeparam name="TOutput">返回结果类型</typeparam><param name="reqContext">请求参数实例</param><param name="fileAbsPath">上传文件路径</param><param name="fileName">上传的文件命名</param>
            <returns>
            返回结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWebService(Edu.Framework.Comm.WebRequest,System.Int32,System.Boolean)">
            <summary>
            动态调用WebService
            
            </summary>
            <param name="request">WebService请求参数</param><param name="isForceReBuild">是否重新WebService地址</param><param name="iTimeOut">服务请求超时时间,默认10分钟为大数据处理预设的分钟数，如果不能满足需要可以修改本参数</param>
            <returns>
            object
            </returns>
            
            <remarks>
            返回的是一个对象，可以是JSON格式，也可以是其他格式。
            </remarks>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var req = new WebServiceRequest(){
                        ...属性设置
            
                        };
                        var objRet= req.InvokeWebService();
                        ]]>
            </code>
            
            </example>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWebService``1(Edu.Framework.Comm.WebRequest,System.Int32,System.Boolean)">
            <summary>
            动态调用WebService
            
            </summary>
            <typeparam name="T">返回数据类型</typeparam><param name="request">请求参数封装</param><param name="isForceReBuild">是否强制刷新</param><param name="iTimeOut">服务请求超时时间,默认10分钟为大数据处理预设的分钟数，如果不能满足需要可以修改本参数</param>
            <returns>
            返回T类型数据
            </returns>
            
            <remarks>
            返要求服务返回的数据必须是符合标准JSON格式，同时需与类型T定义需一致，确保能顺利转换过去，否则转换将会失败。
            </remarks>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var req = new WebServiceRequest(){
                        ...属性设置
            
                        };
                        T objRet= req.InvokeWebService<T>();
                        ]]>
            </code>
            
            </example>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ClearWebService(Edu.Framework.Comm.WebRequest)">
            <summary>
            清除Web服务
            
            </summary>
            <param name="request">封装的Web服务参数</param>
            <remarks>
            应用场景：本次清除后，再下次回调时会重新下载并生成Web服务描述，
                        并缓存服务描述，再进行实际调用时候 ，直接调用即可
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetCompilerResults(Edu.Framework.Comm.WebRequest)">
            <summary>
            编译代理类
            
            </summary>
            <param name="request"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetClassName(System.String)">
            <summary>
            获取WebService名称
            
            </summary>
            <param name="url"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWcfService(Edu.Framework.Comm.WcfRequest)">
            <summary>
            请求WCF
            </summary>
            <param name="request">Wcf请求</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWcfService``1(Edu.Framework.Comm.WcfRequest)">
            <summary>
            调用Wcf服务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWcfServiceRestful(Edu.Framework.Comm.WcfRequest)">
            <summary>
            调取WCF服务返回处理结果
            
            </summary>
            <param name="request">请求参数</param>
            <returns>
            调用结果
            </returns>
            
            <remarks>
            WCF服务服务是风格RESTFul,即 http://xxxxxx.com/aaaa.svc/methodA/prams1/prams2 形式
            </remarks>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var req = new InvokeServiceRestful(){
                        ...属性设置
            
                        };
                        String objRet= req.InvokeWcfServiceRestful();
                        ]]>
            </code>
            
            </example>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.InvokeWcfServiceGetResutful``1(Edu.Framework.Comm.WcfRequest)">
            <summary>
            调取WCF服务返回处理结果
            
            </summary>
            <typeparam name="T">返回的数据转换为强类型的类型</typeparam><param name="request">请求参数</param>
            <returns>
            调用结果：结果将以JSON的格式返回
            </returns>
            
            <remarks>
            WCF服务服务是风格RESTFul
            </remarks>
            
            <remarks>
            WCF服务服务是风格RESTFul,即 http://xxxxxx.com/aaaa.svc/methodA/prams1/prams2 形式
            </remarks>
            
            <remarks>
            返要求服务返回的数据必须是符合标准JSON格式，同时需与类型T定义需一致，确保能顺利转换过去，否则转换将会失败。
            </remarks>
            
            <example>
            示例.
            
            <code>
            <![CDATA[
                        var req = new WcfServiceRequest(){
                        ...属性设置
            
                        };
                        T objRet= req.InvokeWcfServiceGetResutful<T>();
                        ]]>
            </code>
            
            </example>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetBytesFromHexString(System.String)">
            <summary>
            16进制字符串转2进制数组
            
            </summary>
            <param name="hexidecimalNumber">16进制数.eg:0F351A </param>
            <returns>
            字节数组
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetHexStringFromBytes(System.Byte[])">
            <summary>
            2进制数组转16进制字符串
            
            </summary>
            <param name="bytes">字节数组</param>
            <returns>
            
            <para>
            16进制数.eg:0F351A
            </para>
            
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSqLiteGuid(System.Guid)">
            <summary>
            转换GUID为二进制的16进制形式的字符串
            
            </summary>
            <param name="guid">标准Guid</param>
            <remarks>
            Guid.二进制的16进制形式的字符串
            </remarks>
            
            <returns>
            16进制形式的Guid
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSqLiteGuid(System.Guid,System.String)">
            <summary>
            格式化GUID为SQL字符串
            
            </summary>
            <param name="guid">Guid字符串</param><param name="colunmName">Sqlite.字段名</param>
            <remarks>
            用在Sqlite Where条件时候的使用
            </remarks>
            
            <returns>
            UPPER(HEX([字段名]))=二进制的16进制形式的字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ConvertOracleGuidToDotnetGuid(System.String)">
            <summary>
            把Oracle.Guid字符串形式的Guid转换为Dotnet.Guid格式
            
            </summary>
            <param name="oracleGuid">通过rawtohex转换Oracle.Guid后的字符串</param>
            <returns>
            返回Guid.ToString("N")形式
            </returns>
            
            <remarks>
            Oracle时候使用
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ConvertDotnetToOracleGuid(System.Guid,System.Boolean)">
            <summary>
            Dotnet.Guid转换为Oracle.Guid字符串形式
                        应用场景：在Oracle中使用Guid查询Raw类型
            
            </summary>
            <param name="dotNetGuid">标准Guid格式</param><param name="removeSplitLine">是否移除Guid间的横线</param>
            <returns>
            通过rawtohex转换Oracle.Guid后的字符串形式
            </returns>
            
            <remarks>
            Oracle时候使用
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ConvertOracleGuidToDotnetGuid(System.Guid)">
            <summary>
            把Oracle支持的Guid字符串格式转化为Dotnet Guid格式
                        eg：大写不带括号
                        31D9EFC0-2403-409B-A416-37B81ED1EC75
                        770979D2-6923-4E18-8825-490FE9EB11E3
            
            </summary>
            <param name="guid">Guid字符串：{31D9EFC0-2403-409B-A416-37B81ED1EC75}</param>
            <returns>
            返回770979D2-6923-4E18-8825-490FE9EB11E3形式
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToGuid(System.String)">
            <summary>
            字符串转Guid
            
            </summary>
            <param name="str">Guid等价字符串</param>
            <returns>
            Guid对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ParseHex(System.String)">
            <summary>
            文本转16进制
            
            </summary>
            <param name="text">文本</param>
            <returns>
            16进制
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetMethodName``1(``0)">
            <summary>
            获取当前方法名
            
            </summary>
            <typeparam name="T">Class</typeparam><param name="objTarget">Class实例</param>
            <returns>
            当前方法名
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetMethodPath``1(``0)">
            <summary>
            获取当前方法的完整路径
            
            </summary>
            <typeparam name="T">Class</typeparam><param name="objTarget">Class实例</param>
            <returns>
            当前方法的完整路径
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetClassFullName``1(``0)">
            <summary>
            获取方法的完全路径
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="objTarget">对象</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            如果集合中不包含指定项，则添加该项.
            
            </summary>
            <param name="source">集合对象</param><param name="item">被添加进集合的项</param><typeparam name="T">集合元素类型</typeparam>
            <returns>
            添加成功返回true,否则返回false.
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            检查集合是否为空对象，或者集合元素个数是否等于0.
            
            </summary>
            <typeparam name="T">集合元素类型</typeparam><param name="source">集合对象</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            检查字典中是否有某个键名=key的对象，如果有则转换为T类型对象.
            
            </summary>
            <typeparam name="T">目标对象里类型</typeparam><param name="dictionary">字典对象</param><param name="key">键名</param><param name="value">对象不存在时，返回的默认值</param>
            <returns>
            true:转换成功,false转换失败
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            从字典表中获取指定键名=key的对象值.
            
            </summary>
            <param name="dictionary">字典对象</param><param name="key">键名</param><typeparam name="TKey">键类型</typeparam><typeparam name="TValue">目标对象类型</typeparam>
            <returns>
            返回转换值，未找到则返回目标对象的默认值.
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.GetAllBytes(System.IO.Stream)">
            <summary>
            把流转换为二进制
            
            </summary>
            <param name="stream">流对象</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.Func{``0,System.Object})">
            <summary>
            把集合对象转换为控件数据源
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="source">源数据</param><param name="text">Text选择器</param><param name="value">Value选择</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.Func{``0,System.Object},System.String)">
            <summary>
            把集合对象转换为控件数据源
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="source">源数据</param><param name="text">Text选择器</param><param name="value">Value选择</param><param name="optionalText">默认值文本值</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.Func{``0,System.Object},System.Func{``0,System.Boolean})">
            <summary>
            把集合对象转换为控件数据源
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="source">源数据</param><param name="text">Text选择器</param><param name="value">Value选择</param><param name="selected">默认选择器</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.Func{``0,System.Object},System.Func{``0,System.Boolean},System.String)">
            <summary>
            把集合对象转换为控件数据源
            
            </summary>
            <typeparam name="T">对象类型</typeparam><param name="source">源数据</param><param name="text">Text选择器</param><param name="value">Value选择</param><param name="selected">默认选择器</param><param name="optionalText">默认文本值</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DigitalSign(System.String,System.Text.Encoding)">
            <summary>
            数字签名
            
            </summary>
            <param name="input">待数字签名对象字符串表达形式</param><param name="encode">重新组装成的签名字符转换为二进制时的编码格式，默认采用UTF-8</param>
            <returns>
            签名结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DigitalSign(System.String,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            数字签名
            
            </summary>
            <param name="input">待数字签名对象字符串表达形式</param><param name="prefix">签名字符串前缀追加</param><param name="signKey">签名加密Key</param><param name="encode">重新组装成的签名字符转换为二进制时的编码格式，默认采用UTF-8</param><param name="suffix">签名字符串后缀追加</param>
            <returns>
            签名结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DigitalSign(System.String,System.String,System.Text.Encoding,Edu.Framework.Comm.DigitalSignatureType,System.String,System.String)">
            <summary>
            数字签名
            
            </summary>
            <param name="input">待数字签名对象字符串表达形式</param><param name="prefix">签名字符串前缀追加</param><param name="signKey">签名加密Key</param><param name="signType">签名字符串组装格式</param><param name="encode">重新组装成的签名字符转换为二进制时的编码格式，默认采用UTF-8</param><param name="suffix">签名字符串后缀追加</param>
            <returns>
            签名结果
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.DigitalSignature(System.Byte[])">
            <summary>
            二进制数字签名
            
            </summary>
            <param name="objectAsBytes">二进制对象</param>
            <returns>
            签名结果
            </returns>
            
            <remarks>
            转换方式：md5
                        原理:把字节数组的Hash值转换为了16进制字符串
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsValidIp(System.String)">
            <summary>
            验证IP
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsOnlyChinase(System.String)">
            <summary>
            是否完全中文
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsZipCode(System.String)">
            <summary>
            是否邮政编码
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsQQ(System.String)">
            <summary>
            是否QQ
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            QQ最少输入4位数字
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsPhoneNum(System.String)">
            <summary>
            是否手机号或电话号码
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            正确手机号或电话号码,支持多种标准格式
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsLoginAccount(System.String)">
            <summary>
            是否有效登录账号
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            登录名称只允许汉字、英文字母、数字及下划线
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsSafePassword(System.String)">
            <summary>
            是否有效密码
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            正确格式为：以字母开头，长度在6~50之间，只能包含字符、数字和下划线
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsEmail(System.String)">
            <summary>
            是否有效邮箱
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            标准邮箱格式
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsMileageRange(System.String,System.String)">
            <summary>
            是否有效的里程范围
            
            </summary>
            <param name="input">待验证字符串</param><param name="splitChar">里程范围中间间隔符,默认符号：~</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            参考格式：11.1~22.2
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsLngCoodinate(System.String)">
            <summary>
            是否是经度坐标
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            坐标.经度有效范围-180~180
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsLatCoodinate(System.String)">
            <summary>
            是否是纬度坐标
            
            </summary>
            <param name="input">待验证字符串</param>
            <returns>
            验证结果：true通过，false未通过
            </returns>
            
            <remarks>
            坐标.纬度有效范围-90~90
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IpCheck(System.String)">
            <summary>
            验证IP
            
            </summary>
            <param name="ip">IP</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsUrl(System.String)">
            <summary>
            验证网址
                        常用于：http,https,ftp地址验证
            
            </summary>
            <param name="strUrl">网址</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsHandset(System.String)">
            <summary>
            验证手机号
            
            </summary>
            <param name="strHandset">手机号</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsIDcard(System.String)">
            <summary>
            验证身份证
            
            </summary>
            <param name="strIdcard">身份证</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsNumber(System.String)">
            <summary>
            验证正整数
            
            </summary>
            <param name="strNumber">正整数</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsPostalcode(System.String)">
            <summary>
            验证邮编
            
            </summary>
            <param name="strPostalcode">邮编</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.ObjectExtensions.IsDouble(System.String)">
            <summary>
            验证双精度数据
            
            </summary>
            <param name="strDouble">双精度数据</param>
            <returns/>
        </member>
        <member name="T:Edu.Framework.Extensions.QueryExtensions">
            <summary>
            查询扩展
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.ToDisplayDecimal(System.Nullable{System.Decimal},System.String)">
            <summary>
            将decimal转换为友好显示的字符
            
            </summary>
            <param name="val">值</param><param name="format">格式化字符串</param>
            <returns>
            decimal的友好的字符
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.SortBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            扩展排序方法
            
            </summary>
            <typeparam name="T">类型</typeparam><param name="source">Queryable</param><param name="sortExpression">排序表达式</param>
            <returns>
            IQueryable
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.DynamicQuery``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            基于IQueryable实现多表复杂查询,返回结果不包含分页信息
            
            </summary>
            <typeparam name="T">返回结果类型</typeparam><param name="queryable">数据源</param><param name="filter">数据过滤器</param><param name="total">总条数</param><param name="index">页索引[最小值1]</param><param name="size">页大小</param><param name="orderBy">排序</param>
            <returns>
            IQueryable数据对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.DynamicPage``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            基于IQueryable实现多表复杂查询，返回结果包含分页信息
            
            </summary>
            <typeparam name="T">返回结果类型</typeparam><param name="queryable">数据源</param><param name="filter">数据过滤器</param><param name="index">页索引[最小值1]</param><param name="size">页大小</param><param name="orderBy">排序</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.DynamicPage(System.Linq.IQueryable{System.Object},System.Linq.Expressions.Expression{System.Func{System.Object,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{System.Object}})">
            <summary>
            基于IQueryable实现多表复杂查询，返回结果包含分页信息
            
            </summary>
            <param name="queryable">数据源</param><param name="filter">数据过滤器</param><param name="index">页索引[最小值1]</param><param name="size">页大小</param><param name="orderBy">排序</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.DynamicPageAsyn``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            基于IQueryable实现多表复杂查询，返回结果包含分页信息
            
            </summary>
            <typeparam name="T">返回结果类型</typeparam><param name="queryable">数据源</param><param name="filter">数据过滤器</param><param name="index">页索引[最小值1]</param><param name="size">页大小</param><param name="orderBy">排序</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.DynamicPageAsyn(System.Linq.IQueryable{System.Object},System.Linq.Expressions.Expression{System.Func{System.Object,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{System.Object}})">
            <summary>
            基于IQueryable实现多表复杂查询，返回结果包含分页信息
            
            </summary>
            <param name="queryable">数据源</param><param name="filter">数据过滤器</param><param name="index">页索引[最小值1]</param><param name="size">页大小</param><param name="orderBy">排序</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件筛选更新
            
            </summary>
            <typeparam name="T">模型类型</typeparam><param name="source">源数据</param><param name="predicate">模型Where筛选器</param><param name="condition">传输参数选择结果</param>
            <returns>
            返回筛选后的IQuerable对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件筛选更新
            
            </summary>
            <typeparam name="T">模型类型</typeparam><param name="source">源数据</param><param name="predicate">模型Where筛选器</param><param name="condition">传输参数选择结果</param>
            <returns>
            返回筛选后的IQuerable对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            根据条件筛选更新
            
            </summary>
            <typeparam name="T">模型类型</typeparam><param name="source">源数据</param><param name="predicate">模型Where筛选器</param><param name="condition">传输参数选择结果</param>
            <returns>
            返回筛选后的IQuerable对象
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.QueryExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            根据条件筛选更新
            
            </summary>
            <typeparam name="T">模型类型</typeparam><param name="source">源数据</param><param name="predicate">模型Where筛选器</param><param name="condition">传输参数选择结果</param>
            <returns>
            返回筛选后的IQuerable对象
            </returns>
        </member>
        <member name="T:Edu.Framework.Extensions.TableExtensions">
            <summary>
            DataTable相关扩展
            
            </summary>
            
            <remarks>
            使用场景：Excel文件导入，以及非WEB应用情况下，比如WinForm应用类型
            </remarks>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToInt(System.Data.DataRow,System.Int32,System.Int32,System.String)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToFloat(System.Data.DataRow,System.Int32,System.Int32,System.String)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToDouble(System.Data.DataRow,System.Int32,System.Int32,System.String)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToDecimal(System.Data.DataRow,System.Int32,System.Int32,System.String)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToGuid(System.Data.DataRow,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param><param name="isAllowEmpty">是否允许为空</param>
            <returns>
            Guid格式
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToTelPhone(System.Data.DataRow,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param><param name="isAllowEmpty">是否允许为空</param>
            <returns>
            电话号码
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToString(System.Data.DataRow,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param><param name="isAllowEmpty">是否允许为空</param>
            <returns>
            字符串
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.TableExtensions.ToDateTime(System.Data.DataRow,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            转换并检查单元格值
            
            </summary>
            <param name="data">DataRow</param><param name="iRow">行</param><param name="iCol">列</param><param name="colName">列名</param><param name="isAllowEmpty">是否允许为空</param>
            <returns>
            可空日期类型
            </returns>
        </member>
        <member name="T:Edu.Framework.Extensions.WinControlExtensions">
            <summary>
            WinForm控件扩展
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.ReleaseCapture">
            <summary>
            释放鼠标捕捉事件
            
            </summary>
            
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetCapture(System.IntPtr)">
            <summary>
            设置鼠标捕捉事件
            
            </summary>
            <param name="hWnd"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.GetFocusedControl(System.Windows.Forms.Control)">
            <summary>
            设置控件焦点
                        WinForm专用
            
            </summary>
            <param name="formControl">WinForm控件</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetNextControlFocused(System.Windows.Forms.Control)">
            <summary>
            按照Tab值设置下一控件焦点
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.InvokeIfNeeded``1(System.Windows.Forms.Control,System.Action{``0},``0)">
            <summary>
            控件跨线程调用
            
            </summary>
            <typeparam name="T">WinForm控件类型</typeparam><param name="objControl">WinForm源控件</param><param name="objAction">将要执行的操作</param><param name="args">参数</param>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.ClearControlData(System.Windows.Forms.Control)">
            <summary>
            清空控件数据
            
            </summary>
            
            <remarks>
            该函数针对部分控件有效
            
            </remarks>
            <param name="objControl">WinForm控件</param>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.CanceChildsNodeCheckState(System.Windows.Forms.TreeNodeCollection,System.Boolean)">
            <summary>
            取消TreeView选择节点信息
            
            </summary>
            <param name="subTreeNodes"/><param name="checkState"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.CanceParentsNodeCheckState(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            取消TreeView选择节点信息
            
            </summary>
            <param name="currNode">当前NodeTree</param><param name="checkState">选择状态</param>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetFormProperty``1(System.Object,System.String,``0)">
            <summary>
            给对象赋值
            
            </summary>
            <typeparam name="T">Winform窗体实体类型</typeparam><param name="objTarget">Winform窗体实例</param><param name="propertyName">属性</param><param name="objValue">值</param>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetClassProperty``1(System.Object,System.String,``0)">
            <summary>
            给对象赋值
            
            </summary>
            <typeparam name="T">class窗体实体类型</typeparam><param name="objTarget">class实例</param><param name="propertyName">属性名</param><param name="objValue"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            给属性赋值
            
            </summary>
            <param name="objTarget"/><param name="propertyName"/><param name="objValue"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.GetProperty``1(System.Object,System.String)">
            <summary>
            获取属性值
            
            </summary>
            <typeparam name="T"/><param name="objTarget"/><param name="propertyName"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetClassField``1(System.Object,System.String,System.Object)">
            <summary>
            给类字段赋值
            
            </summary>
            <typeparam name="T"/><param name="objTarget"/><param name="fieldName"/><param name="objValue"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetFormField``1(System.Object,System.String,System.Object)">
            <summary>
            给表单字段赋值
            
            </summary>
            <typeparam name="T"/><param name="objTarget"/><param name="fieldName"/><param name="objValue"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.GetField``2(``0,System.String)">
            <summary>
            取字段值
            
            </summary>
            <typeparam name="TEntity">实例类型</typeparam><typeparam name="TOut">取值类型</typeparam><param name="objTarget">实例</param><param name="fieldName">字段名</param>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.InvokMethod(System.Object,System.String,System.Object[])">
            <summary>
            调用方法
            
            </summary>
            <param name="objTarget"/><param name="methodName"/><param name="objValue"/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.InvokMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            调用方法
            
            </summary>
            <param name="objTarget"/><param name="methodName"/><param name="objValue"/>
            <returns>
            返回类型T
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SaveImage2Jpg(System.Windows.Media.Imaging.BitmapSource,System.Int32)">
            <summary>
            保存为Jpg图片
            
            </summary>
            <param name="bsrc">示例：(BitmapSource)Img.Source</param><param name="quality">图片质量（0-100）,若不设置，则默认取80</param>
            <returns>
            是否成功
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.LoadImages(System.String,System.Int32)">
            <summary>
            图片加载
            
            </summary>
            <param name="filePath">路径</param><param name="dpWidth">图片解析的宽度（应为程序中所定义的imgWidth，如有特殊需要可自定义）</param>
            <returns>
            BitmapImage
            </returns>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.SetCapture``1(``0)">
            <summary>
            设置鼠标事件捕捉
            
            </summary>
            <typeparam name="TControl">控件类型</typeparam><param name="ctrl">控件实例</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.Extensions.WinControlExtensions.ReleaseCapture``1(``0)">
            <summary>
            释放鼠标事件捕捉
            
            </summary>
            <typeparam name="TControl">控件类型</typeparam><param name="ctrl">控件实例</param>
            <returns/>
        </member>
        <member name="P:Edu.Framework.IocMvc4.AutofacHelper.ConnectionString">
            <summary>
            获取链接字符串
            
            </summary>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.BeginWebIocConfig">
            <summary>
            开始Mvc.Web.Ioc配置
            
            </summary>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.InitWebController(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            注册MvcWeb控制器
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="assembly"/>
            <returns>
            ContainerBuilder
            </returns>
            
            <remarks>
            记得添加Autofac.WebApi(3.0.0.0),Autofac.Mvc4(3.0.0.0)引用
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.InitWebApiController(Autofac.ContainerBuilder,System.Web.Http.HttpConfiguration,System.Reflection.Assembly)">
            <summary>
            注册MvcWebApi控制器
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="httpConfig">Http配置对象</param><param name="assembly">主程序集</param>
            <returns>
            ContainerBuilder
            </returns>
            
            <remarks>
            记得添加Autofac.WebApi(3.0.0.0),Autofac.Mvc4(3.0.0.0)引用
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.InitWebIoc(Autofac.IContainer)">
            <summary>
            初始化Mvc.Web依赖注入IOC配置
            
            </summary>
            <param name="container">IContainer</param>
            <returns>
            ContainerBuilder
            </returns>
            
            <remarks>
            记得添加Autofac.WebApi(3.0.0.0),Autofac.Mvc4(3.0.0.0)引用
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.InitWebApiIoc(Autofac.IContainer,System.Web.Http.HttpConfiguration)">
            <summary>
            初始化Mvc.WebApi依赖注入IOC配置
            
            </summary>
            <param name="container">IContainer</param><param name="httpConfig">Http配置对象</param>
            <returns>
            ContainerBuilder
            </returns>
            
            <remarks>
            记得添加Autofac.WebApi(3.0.0.0),Autofac.Mvc4(3.0.0.0)引用
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterDbContext``1(Autofac.ContainerBuilder)">
            <summary>
            注册数据上下文
            
            </summary>
            <typeparam name="T">DbContext上下文实现类</typeparam><param name="builder">Autofac.Ioc容器</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterDbContext``1(Autofac.ContainerBuilder,System.Func{System.String})">
            <summary>
            注册数据上下文
            
            </summary>
            <typeparam name="T">DbContext上下文实现类</typeparam><param name="builder">Autofac.Ioc容器</param><param name="decConn">Conn连接字符串解密委托</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Type,System.String,System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="appKey">web.config.appSetting.配置项key,默认值ServiceReg</param><param name="tagType">服务标记接口类型,默认值为typeof(IScopedService)</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            ContainerBuilder
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.String,System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="appKey">web.config.appSetting.配置项key,默认值ServiceReg</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            ContainerBuilder
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="assemblyNames">将要扫描的程序集名</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Type,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="tagType">服务标记接口类型,默认值为typeof(IScopedService)</param><param name="autoFillProperty">是否通过属性自动注入</param><param name="assemblyNames">将要扫描的程序集名</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Collections.Generic.List{System.String},System.Func{System.Type,System.Boolean},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="typeSelector">目标类所继承的接口类型筛选器</param><param name="tagNameSelector">标记接口名筛选器</param><param name="autoFillProperty">是否通过属性自动注入</param><param name="assemblyNames">将要扫描的程序集名</param>
            <returns/>
            
            <example>
            例子1：
                        <![CDATA[
                        //autoFillProperty=true||false
                        var  builder=AutofacHelper.BeginWebIocConfig();
                        var assemblyNames=new List<string>{"xxxx.dll"}
                        var tagType = typeof(IScopedService);
                        builder.RegisterService(assemblyNames, f => f==tagType, p => p == tagType.Name, autoFillProperty);
                        ]]>
            </example>
            
            <remarks>
            其他仓储注册方法，均从方法演变扩展出来，本方法为注册仓储的核心方法
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Func{System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="preicate">获取包含业务层服务实现的程序集名(建议包含后缀名.dll)列表</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            ContainerBuilder
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterService(Autofac.ContainerBuilder,System.Type,System.Func{System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            注册业务层.服务层
            
            </summary>
            <param name="builder">ContainerBuilder</param><param name="tagType">服务标记接口类型,默认值为typeof(IScopedService)</param><param name="preicate">获取包含业务层服务实现的程序集名(建议包含后缀名.dll)列表</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            ContainerBuilder
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.String,System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="appKey">数据层DLL名，包含后缀名</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Type,System.String,System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="tagType">仓储标记接口</param><param name="appKey">数据层DLL名，包含后缀名</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="assemblyNames">数据层DLL名应包含后缀名(.dll),如果没有后缀名(.dll)将会自动处理</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Type,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="tagType">仓储标记接口</param><param name="assemblyNames">数据层DLL名应包含后缀名(.dll),如果没有后缀名(.dll)将会自动处理</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Collections.Generic.List{System.String},System.Func{System.Type,System.Boolean},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            注册仓储服务
                        (万能方法，适用于任何筛选条件)
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="interfaceSelector">标记接口类型筛选器</param><param name="tagNameSelector">标记接口名过滤器，把符合标记接口名的类进行处理</param><param name="assemblyNames">数据层DLL名应包含后缀名(.dll),如果没有后缀名(.dll)将会自动处理</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
            
            <example>
            例子1：
                        <![CDATA[
                        var  builder=AutofacHelper.BeginWebIocConfig();
                        var assemblyNames=new List<string>{"xxxx.dll"}
                        var tagType = typeof(IScopedRepository);
                        builder.RegisterRepository(assemblyNames, f => f.BaseType.IsAbstract, p => p == tagType.Name, autoFillProperty);
                        ]]>
            </example>
            
            <remarks>
            其他仓储注册方法，均从方法演变扩展出来，本方法为注册仓储的核心方法
            
            </remarks>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Func{System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="preicate">提取数据层DLL名应包含后缀名(.dll)的Lambda表达式.如果没有后缀名(.dll)将会自动处理</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="M:Edu.Framework.IocMvc4.AutofacHelper.RegisterRepository(Autofac.ContainerBuilder,System.Type,System.Func{System.Collections.Generic.List{System.String}},System.Boolean)">
            <summary>
            注册仓储服务
            
            </summary>
            <param name="builder">Autofac.Ioc容器</param><param name="tagType">仓储标记接口</param><param name="preicate">提取数据层DLL名应包含后缀名(.dll)的Lambda表达式.如果没有后缀名(.dll)将会自动处理</param><param name="autoFillProperty">是否通过属性自动注入</param>
            <returns>
            容器创建者
            </returns>
        </member>
        <member name="T:Edu.Framework.Json.ApiRequest">
            <summary>
            API请求参数基类
            </summary>
        </member>
        <member name="M:Edu.Framework.Json.ApiRequest.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiRequest.Key">
            <summary>
            认证KEY
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiRequest.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiSingleRequest`1">
            <summary>
            WebApi请求单参
            </summary>
        </member>
        <member name="M:Edu.Framework.Json.ApiSingleRequest`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiSingleRequest`1.Data">
            <summary>
             请求参数
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiMutileRequest`1">
            <summary>
            WebApi请求多参
            </summary>
        </member>
        <member name="M:Edu.Framework.Json.ApiMutileRequest`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiMutileRequest`1.Data">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiPageRequest`1">
            <summary>
            WebApi请求分页参数
            </summary>
        </member>
        <member name="M:Edu.Framework.Json.ApiPageRequest`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiPageRequest`1.PageIndex">
            <summary>
            页号
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiPageRequest`1.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiResonse">
            <summary>
            返回api操作状态信息
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiResonse.State">
            <summary>
            操作状态
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiResonse.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiResonse.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiSingleResonse`1">
            <summary>
            Api请求返回结果
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
        </member>
        <member name="M:Edu.Framework.Json.ApiSingleResonse`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiSingleResonse`1.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiMutileResonse`1">
            <summary>
            返回多条数据
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="M:Edu.Framework.Json.ApiMutileResonse`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiMutileResonse`1.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.ApiMutileResonse`1.RecourdCount">
            <summary>
            返回总数
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.ApiPageResonse`1">
            <summary>
            返回多条数据
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="P:Edu.Framework.Json.ApiPageResonse`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="T:Edu.Framework.Json.SingleData`1">
            <summary>
            返回单条数据
                        通用版
            
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="P:Edu.Framework.Json.SingleData`1.State">
            <summary>
            操作状态
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.SingleData`1.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Edu.Framework.Json.SingleData`1.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="M:Edu.Framework.Json.SingleData`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Edu.Framework.MathExpression.BinaryExpression">
            <summary>
            Binary表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.BinaryExpression.LeftExpression">
            <summary>
            左表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.BinaryExpression.RightExpression">
            <summary>
            右表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.BinaryExpression.Type">
            <summary>
            运算表达式类型
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.BinaryExpression.#ctor(Edu.Framework.MathExpression.BinaryExpressionType,Edu.Framework.MathExpression.LogicalExpression,Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            构造函数
            
            </summary>
            <param name="type">运算表达式类型</param><param name="leftExpression">左表达式</param><param name="rightExpression">右表达式</param>
        </member>
        <member name="M:Edu.Framework.MathExpression.BinaryExpression.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary/>
            <param name="visitor"/>
        </member>
        <member name="T:Edu.Framework.MathExpression.BinaryExpressionType">
            <summary>
            表达式类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.And">
            <summary>
            And操作 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Or">
            <summary>
            Or操作 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.NotEqual">
            <summary>
            不等于操作 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.LesserOrEqual">
            <summary>
            小于等于 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.GreaterOrEqual">
            <summary>
            大于等于 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Lesser">
            <summary>
            小于 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Minus">
            <summary>
            减运算
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Plus">
            <summary>
            加运算
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Modulo">
            <summary>
            模运算 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Div">
            <summary>
            除运算 
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Times">
            <summary>
            乘运算
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.BitwiseOr">
            <summary>
            按位或
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.BitwiseAnd">
            <summary>
            按位与
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.BitwiseXOr">
            <summary>
            按位异或
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.LeftShift">
            <summary>
            左移位
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.RightShift">
            <summary>
            右移位
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.BinaryExpressionType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Edu.Framework.MathExpression.EvaluateFunctionHandler">
            <summary>
            求值函数委托
            
            </summary>
            <param name="name">求值方法名</param><param name="args">求值方法参数</param>
        </member>
        <member name="T:Edu.Framework.MathExpression.EvaluateOptions">
            <summary>
            求值选择
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.EvaluateOptions.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.EvaluateOptions.IgnoreCase">
            <summary>
            忽略大小写
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.EvaluateOptions.NoCache">
            <summary>
            无缓存
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.EvaluateOptions.IterateParameters">
            <summary>
            迭代参数
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.EvaluateOptions.RoundAwayFromZero">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edu.Framework.MathExpression.EvaluateParameterHandler">
            <summary>
            用于计算的参数委托
            
            </summary>
            <param name="name"/><param name="args"/>
        </member>
        <member name="T:Edu.Framework.MathExpression.EvaluationException">
            <summary>
            求值异常
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.EvaluationVisitor">
            <summary>
            求值访问者
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.EvaluationVisitor.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.EvaluationVisitor.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="E:Edu.Framework.MathExpression.EvaluationVisitor.EvaluateFunction">
            <summary>
            求值函数
            </summary>
        </member>
        <member name="E:Edu.Framework.MathExpression.EvaluationVisitor.EvaluateParameter">
            <summary>
            求值变量
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.#ctor(Edu.Framework.MathExpression.EvaluateOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.GetMostPreciseType(System.Type,System.Type)">
            <summary>
            Gets the the most precise type.
            
            </summary>
            <param name="a">Type a.</param><param name="b">Type b.</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.CompareUsingMostPreciseType(System.Object,System.Object)">
            <summary>
            获取使用最多的精确类型
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.TernaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.BinaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.UnaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.ValueExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.Function)">
            <summary>
            访问
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.EvaluationVisitor.Visit(Edu.Framework.MathExpression.Identifier)">
            <summary>
            访问
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.Function">
            <summary>
            函数
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.Function.Identifier">
            <summary>
            标识符
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.Function.Expressions">
            <summary>
            逻辑表达式
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.Function.#ctor(Edu.Framework.MathExpression.Identifier,Edu.Framework.MathExpression.LogicalExpression[])">
            <summary>
            构造函数
            </summary>
            <param name="identifier"></param>
            <param name="expressions"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.Function.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary>
            接收
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.FunctionArgs">
            <summary>
            求值函数参数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.FunctionArgs.Result">
            <summary>
            结果
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.FunctionArgs.HasResult">
            <summary/>
        </member>
        <member name="P:Edu.Framework.MathExpression.FunctionArgs.Parameters">
            <summary>
            数学运行表达式参数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.FunctionArgs.EvaluateParameters">
            <summary>
            当前计算参数
            
            </summary>
            
            <returns>
            计算返回结果
            </returns>
        </member>
        <member name="T:Edu.Framework.MathExpression.Identifier">
            <summary>
            标识符
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.Identifier.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.Identifier.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.Identifier.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary>
            接收
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.LogicalExpression">
            <summary>
            逻辑表达式
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.And(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.And(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.DividedBy(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.DividedBy(System.Object)">
            <summary>
            DividedBy运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.EqualsTo(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            EqualsTo运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.EqualsTo(System.Object)">
            <summary>
            EqualsTo运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.GreaterThan(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            GreaterThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.GreaterThan(System.Object)">
            <summary>
            GreaterThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.GreaterOrEqualThan(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            GreaterOrEqualThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.GreaterOrEqualThan(System.Object)">
            <summary>
            GreaterOrEqualThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LesserThan(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            LesserThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LesserThan(System.Object)">
            <summary>
            LesserThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LesserOrEqualThan(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            LesserOrEqualThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LesserOrEqualThan(System.Object)">
            <summary>
            LesserOrEqualThan运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Minus(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            Minus运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Minus(System.Object)">
            <summary>
            Minus运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Modulo(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            Modulo运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Modulo(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.NotEqual(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.NotEqual(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Or(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Or(System.Object)">
            <summary>
            Or运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Plus(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            Plus运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Plus(System.Object)">
            <summary>
            Plus运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Mult(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            Mult运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Mult(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseOr(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            BitwiseOr运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseOr(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseAnd(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            BitwiseAnd运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseAnd(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseXOr(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            BitwiseXOr运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.BitwiseXOr(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LeftShift(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            LeftShift运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.LeftShift(System.Object)">
            <summary>
            And运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.RightShift(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            RightShift运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.RightShift(System.Object)">
            <summary>
            RightShift运算
            
            </summary>
            <param name="operand">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.ToString">
            <summary/>
            
            <returns>
            表达式
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpression.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary/>
            <param name="visitor">表达式</param>
            <returns>
            表达式
            </returns>
        </member>
        <member name="T:Edu.Framework.MathExpression.LogicalExpressionVisitor">
            <summary>
            逻辑表达式访问者
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.TernaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.BinaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.UnaryExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.ValueExpression)">
            <summary>
            访问
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.Function)">
            <summary>
            访问
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.LogicalExpressionVisitor.Visit(Edu.Framework.MathExpression.Identifier)">
            <summary>
            访问
            </summary>
            <param name="function"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.Numbers">
            <summary>
            Numbers对象
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.ConvertIfString(System.Object)">
            <summary>
            数字转Decimal对象
            
            </summary>
            <param name="s">字符串或字符</param>
            <returns>
            转换成功，则返回Decimal对象，反之返回字符串本身
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Add(System.Object,System.Object)">
            <summary>
            加法运行
            
            </summary>
            <param name="a">家数</param><param name="b">被加数</param>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Soustract(System.Object,System.Object)">
            <summary>
            减法运算
            
            </summary>
            <param name="a">减数</param><param name="b">被减数</param>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Multiply(System.Object,System.Object)">
            <summary>
            乘法运算
            
            </summary>
            <param name="a">乘数</param><param name="b">被乘数</param>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Divide(System.Object,System.Object)">
            <summary>
            除法运算
            
            </summary>
            <param name="a">除数</param><param name="b">被除数</param>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Modulo(System.Object,System.Object)">
            <summary>
            求模运算：除数取整
            
            </summary>
            <param name="a"/><param name="b"/>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Max(System.Object,System.Object)">
            <summary>
            求最大值
            
            </summary>
            <param name="a"/><param name="b"/>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.Numbers.Min(System.Object,System.Object)">
            <summary>
            求最小值
            
            </summary>
            <param name="a"/><param name="b"/>
            <returns>
            运算结果
            </returns>
        </member>
        <member name="T:Edu.Framework.MathExpression.ParameterArgs">
            <summary>
            自定义Lambda参数
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.ParameterArgs.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.ParameterArgs.HasResult">
            <summary>
            是否有结果
            </summary>
        </member>
        <member name="T:Edu.Framework.MathExpression.ParameterReplace">
            <summary>
            自定义参数表达式
            
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ParameterReplace._parameters">
            <summary/>
        </member>
        <member name="M:Edu.Framework.MathExpression.ParameterReplace.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression}})">
            <summary/>
            <param name="paramList"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.ParameterReplace.Replace(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression}})">
            <summary>
            替换
            
            </summary>
            <param name="e"/><param name="paramList"/>
            <returns/>
        </member>
        <member name="M:Edu.Framework.MathExpression.ParameterReplace.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary/>
            <param name="p"/>
            <returns/>
        </member>
        <member name="T:Edu.Framework.MathExpression.ParameterReplace.ParameterEquality">
            <summary/>
        </member>
        <member name="T:Edu.Framework.MathExpression.SerializationVisitor">
            <summary>
            序列化访问器
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.SerializationVisitor.Result">
            <summary>
            转换结果
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            逻辑表达式
            
            </summary>
            <param name="expression"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.TernaryExpression)">
            <summary>
            访问三元表达式
            
            </summary>
            <param name="expression"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.BinaryExpression)">
            <summary>
            访问两元表达式
            
            </summary>
            <param name="expression"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.UnaryExpression)">
            <summary>
            访问一元表达式
            
            </summary>
            <param name="expression"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.ValueExpression)">
            <summary/>
            <param name="expression"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.Function)">
            <summary>
            访问求值函数
            </summary>
            <param name="function"/>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.Visit(Edu.Framework.MathExpression.Identifier)">
            <summary>
            访问
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.SerializationVisitor.EncapsulateNoValue(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            封装无值
            </summary>
            <param name="expression"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.TernaryExpression">
            <summary>
            三元表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TernaryExpression.LeftExpression">
            <summary>
            表达式树.左表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TernaryExpression.MiddleExpression">
            <summary>
            表达式树.中间表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TernaryExpression.RightExpression">
            <summary>
            表达式树.右表达式
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.TernaryExpression.#ctor(Edu.Framework.MathExpression.LogicalExpression,Edu.Framework.MathExpression.LogicalExpression,Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            构造函数
            
            </summary>
            <param name="leftExpression">左表达式</param><param name="middleExpression">中间表达式</param><param name="rightExpression">右表达式</param>
        </member>
        <member name="M:Edu.Framework.MathExpression.TernaryExpression.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary>
            逻辑表达式访问器
            
            </summary>
            <param name="visitor"/>
        </member>
        <member name="T:Edu.Framework.MathExpression.TyMathExpression">
            <summary>
            数学表达式
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.TyMathExpression.OriginalExpression">
            <summary>
            Textual representation of the expression to evaluate.
            
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.TyMathExpression.ParameterEnumerators">
            <summary>
            参数枚举器
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.TyMathExpression.ParametersBackup">
            <summary>
            参数副本
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TyMathExpression.Options">
            <summary>
            求值选择
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TyMathExpression.CacheEnabled">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TyMathExpression.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TyMathExpression.ParsedExpression">
            <summary>
            解析表达式
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.TyMathExpression.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="E:Edu.Framework.MathExpression.TyMathExpression.EvaluateFunction">
            <summary>
            求值函数
            </summary>
        </member>
        <member name="E:Edu.Framework.MathExpression.TyMathExpression.EvaluateParameter">
            <summary>
            求值参数
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.#ctor(System.String,Edu.Framework.MathExpression.EvaluateOptions)">
            <summary>
            构造函数
            </summary>
            <param name="expression"></param>
            <param name="options"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.#ctor(Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            构造函数
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.#ctor(Edu.Framework.MathExpression.LogicalExpression,Edu.Framework.MathExpression.EvaluateOptions)">
            <summary>
            构造函数
            </summary>
            <param name="expression"></param>
            <param name="options"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.CleanCache">
            <summary>
            Removed unused entries from cached compiled expression
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.Compile(System.String,System.Boolean)">
            <summary>
            编译
            </summary>
            <param name="expression"></param>
            <param name="nocache"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.HasErrors">
            <summary>
            Pre-compiles the expression in order to check syntax errors.
                        If errors are detected, the Error property contains the message.
            
            </summary>
            
            <returns>
            True if the expression syntax is correct, otherwiser False
            </returns>
        </member>
        <member name="M:Edu.Framework.MathExpression.TyMathExpression.Evaluate">
            <summary>
            求值运算
            </summary>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.MathExpression.UnaryExpression">
            <summary>
            一元表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.UnaryExpression.Expression">
            <summary>
            逻辑表达式
            
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.UnaryExpression.Type">
            <summary>
            一元运算符表达式类型
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.UnaryExpression.#ctor(Edu.Framework.MathExpression.UnaryExpressionType,Edu.Framework.MathExpression.LogicalExpression)">
            <summary>
            构造函数
            
            </summary>
            <param name="type">一元运算符表达式类型</param><param name="expression">逻辑表达式</param>
        </member>
        <member name="M:Edu.Framework.MathExpression.UnaryExpression.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary>
            接收
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.UnaryExpressionType">
            <summary>
            一元运算符表达式类型
            
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.UnaryExpressionType.Not">
            <summary>
            非
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.UnaryExpressionType.Negate">
            <summary>
            对立面
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.UnaryExpressionType.BitwiseNot">
            <summary>
            按位非
            </summary>
        </member>
        <member name="T:Edu.Framework.MathExpression.ValueExpression">
            <summary>
            值表达式
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.ValueExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Edu.Framework.MathExpression.ValueExpression.Type">
            <summary>
            值类型
            </summary>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.Object,Edu.Framework.MathExpression.ValueType)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.MathExpression.ValueExpression.Accept(Edu.Framework.MathExpression.LogicalExpressionVisitor)">
            <summary>
            接收
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Edu.Framework.MathExpression.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ValueType.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ValueType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ValueType.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ValueType.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:Edu.Framework.MathExpression.ValueType.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="T:Edu.Framework.MvcControl.AjaxOnlyAttribute">
            <summary>
            只能进行AJAX访问的Action
            </summary>
        </member>
        <member name="M:Edu.Framework.MvcControl.AjaxOnlyAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            只能进行AJAX访问的Action
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Edu.Framework.MvcControl.IHideObjectMembers">
            <summary>
            隐藏对象基类
            
            </summary>
        </member>
        <member name="M:Edu.Framework.MvcControl.IHideObjectMembers.Equals(System.Object)">
            <summary>
            判断是否相等.
            
            </summary>
            <param name="value">比较值.</param>
            <returns/>
        </member>
        <member name="M:Edu.Framework.MvcControl.IHideObjectMembers.GetHashCode">
            <summary>
            获取Hash值.
            
            </summary>
            
            <returns>
            Hash值
            </returns>
        </member>
        <member name="M:Edu.Framework.MvcControl.IHideObjectMembers.GetType">
            <summary>
            获取控件类型.
            
            </summary>
            
            <returns>
            控件类型
            </returns>
        </member>
        <member name="M:Edu.Framework.MvcControl.IHideObjectMembers.ToString">
            <summary>
            转换为字符串.
            
            </summary>
            
            <returns/>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncConnect">
            <summary>
            Async connect operation
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.AsyncConnect.Completed">
            <summary>
            Completed callback
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncDisconnect">
            <summary>
            Async disconnect operation
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.AsyncDisconnect.Completed">
            <summary>
            Disconnected callback
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncIOOperation">
            <summary>
            Async send/receive operation
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncIOOperation.Protocol">
            <summary>
            Message protocol
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncIOOperation.Error">
            <summary>
            Socket error
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.AsyncIOOperation.#ctor(System.Net.Sockets.Socket,Edu.Framework.Network.FlexiSocket.IProtocol)">
            <summary>
            构造函数
            </summary>
            <param name="socket"></param>
            <param name="protocol"></param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncReceive">
            <summary>
            Async receive operation
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.AsyncReceive.Completed">
            <summary>
            Completed callback
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncReceive.Data">
            <summary>
            Received data
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncReceive.StringData">
            <summary>
            Received data parsed as string
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncSend">
            <summary>
            Async send operation
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.AsyncSend.Completed">
            <summary>
            Send completed callback
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation">
            <summary>
            Async socket operation
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.socket">
            <summary>
            Target socket
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.ar">
            <summary>
            Async result
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.IsCompleted">
            <summary>
            Is this operation has completed(either successful or failed)
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.IsSuccessful">
            <summary>
            If this operation has completed successfully
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.AsyncSocketOperation.Dispose">
            <summary>
            Dispose the async operation
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiMemberIgnoreAttribute">
            <summary>
            Attributed public members will not be serialized
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiMemberIncludeAttribute">
            <summary>
            Attributed non-public members will be serialized
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiMemberOrderAttribute">
            <summary>
            Custom order applied to serialization
            </summary>
            <remarks>
            See <see cref="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout.Explicit"/>
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiMemberOrderAttribute.order">
            <summary>
            Serialization order
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiMemberOrderAttribute.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiSerializableAttribute">
            <summary>
            Serialization with options
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.FlexiSerializableAttribute.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout">
            <summary>
            Member layout type
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout.MetadataToken">
            <summary>
            Members are ordered by <see cref="P:System.Reflection.MemberInfo.MetadataToken"/>
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout.Alphabetical">
            <summary>
            Members are ordered by names in alphabetic
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout.Mapping">
            <summary>
            Members are not ordered but mapped by names
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationLayout.Explicit">
            <summary>
            Members are ordered by custom assignment
            </summary>
            <remarks>
            Only members with <see cref="T:Edu.Framework.Network.FlexiSocket.FlexiMemberOrderAttribute"/> will be serialized
            </remarks>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.FlexiSerializationOptions">
            <summary>
            Options applied to serialization
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationOptions.Default">
            <summary>
            Default option
            </summary>
            <remarks>
            Public properties/fields will be serialized
            <para></para>
            Public properties/fields with <see cref="T:Edu.Framework.Network.FlexiSocket.FlexiMemberIgnoreAttribute"/> will not be serialized
            <para></para>
            Non-public properties/fields will not be serialized
            <para></para>
            Non-public properties/fields with <see cref="T:Edu.Framework.Network.FlexiSocket.FlexiMemberIncludeAttribute"/> will be serialized
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationOptions.Fields">
            <summary>
            Fields will be serialized
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationOptions.Properties">
            <summary>
            Properties will be serialized
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.FlexiSerializationOptions.DeclaredOnly">
            <summary>
            Only members declared by target type will be serialized
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serialize object to stream
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="stream">Output stream</param>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserialize object from stream
            </summary>
            <param name="type">Object type</param>
            <param name="stream">Input stream</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize object from stream
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="stream">Input stream</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Encode(System.Object,System.Text.StringBuilder)">
            <summary>
            Encode object to string
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="builder">Output StringBuilder</param>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Decode(System.Type,System.String)">
            <summary>
            Decode object from string
            </summary>
            <param name="type">Object type</param>
            <param name="content">Input string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSerializer.Decode``1(System.String)">
            <summary>
            Decode object from string
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="content">Input string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSocket.Create(System.String,System.Int32,Edu.Framework.Network.FlexiSocket.IProtocol)">
            <summary>
            Create a client
            </summary>
            <param name="ip">Server address</param>
            <param name="port">Server listening port</param>
            <param name="protocol">Protocol</param>
            <returns>Created client</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSocket.Create(System.Int32,Edu.Framework.Network.FlexiSocket.IProtocol,System.Boolean)">
            <summary>
            Create a server
            </summary>
            <param name="port">Listening port</param>
            <param name="protocol">Protocol</param>
            <param name="ipv6">Use ipv6</param>
            <returns>Created server</returns>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSocket.StateObject.#ctor(System.Net.Sockets.Socket,Edu.Framework.Network.FlexiSocket.IProtocol)">
            <summary>
            Receive state
            </summary>
            <param name="handler"></param>
            <param name="protocol"></param>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.FlexiSocket.StateObject.#ctor(System.Net.Sockets.Socket,Edu.Framework.Network.FlexiSocket.IProtocol,System.Byte[])">
            <summary>
            Send state
            </summary>
            <param name="handler"></param>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.IFlexiSerializer`1">
            <summary>
            Custom serialization callback
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.IFlexiSerializer`1.Serialize(`0,System.IO.BinaryWriter)">
            <summary>
            Serialize value to stream
            </summary>
            <param name="value">Data</param>
            <param name="writer">Output stream writer</param>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.IFlexiSerializer`1.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize value from stream
            </summary>
            <param name="reader">Input stream reader</param>
            <returns>Deserialized value</returns>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.IProtocol">
            <summary>
            Message protocol to encode/decode message, also ensure the received message to be complete and correct
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.IProtocol.Encoding">
            <summary>
            Encoding format
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.IProtocol.IsComplete(System.IO.MemoryStream)">
            <summary>
            Check message's completeness
            </summary>
            <param name="stream">Message stream</param>
            <returns>True if complete</returns>
            <remarks>
            You might need to reset the stream's <see cref="P:System.IO.MemoryStream.Position"/> before checking, but make sure to set it back after checking
            <para/>
            </remarks>
            <example>
            <code>
            var position = stream.Position;
            stream.Seek(0, SeekOrigin.Begin);
            var reader = new BinaryReader(stream);
            var length = reader.ReadInt32();
            stream.Seek(position, SeekOrigin.Begin);
            var completed = stream.Length &gt;= length + sizeof (int);
            </code>
            </example>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.IProtocol.Decode(System.IO.MemoryStream)">
            <summary>
            Decode message
            </summary>
            <param name="stream">Message stream</param>
            <returns>Decoded data</returns>
            <remarks>
            You might need to reset the stream's <see cref="P:System.IO.MemoryStream.Position"/> before checking
            </remarks>
            <example>
            <code>
            var position = stream.Position;
            stream.Seek(0, SeekOrigin.Begin);
            var reader = new BinaryReader(stream);
            var length = reader.ReadInt32();
            var message = reader.ReadBytes(length);
            </code>
            </example>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.IProtocol.Encode(System.Byte[])">
            <summary>
            Encode message
            </summary>
            <param name="buffer">Message buffer</param>
            <returns>Encoded data</returns>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.Protocols">
            <summary>
            Pre-defined protocols
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.Protocols.None">
            <summary>
            Default protocol
            </summary>
            <remarks>
            No encoding/decoding and no packet checking
            <para/>
            Each packet will be dispatched directly
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.Protocols.BodyLengthPrefix">
            <summary>
            Head + Body structure type
            </summary>
            <remarks>
            The message head is a 4-byte <seealso cref="T:System.Int32"/> which represents the length of the body
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.Protocols.StringTerminated">
            <summary>
            Body + Terminate Tag structure type
            </summary>
            <remarks>
            The message tail is <c>&lt;EOF&gt;</c> which represents the end of a string message
            <para/>
            To specify a custom tag, you might use <see cref="M:Edu.Framework.Network.FlexiSocket.Protocols.StringTerminatedBy(System.String,System.Text.Encoding)"/>
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.Protocols.TotalLengthPrefix">
            <summary>
            Head + Body structure type
            </summary>
            <remarks>
            The message head is a 4-byte <see cref="T:System.Int32"/> which represents the total length, i.e. head's length(4) plus body's length
            <para/>
            In addition, it converts LittleEndian to BigEndian(for specific use like php's pack format http://php.net/manual/en/function.pack.php)
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.Protocols.StringTerminatedBy(System.String,System.Text.Encoding)">
            <summary>
            Body + Terminate Tag structure type
            </summary>
            <param name="tag">End tag</param>
            <param name="encoding">Encoding</param>
            <returns></returns>
            <remarks>
            The message tail is a user-defined tag which represents the end of a string message
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.Protocols.FixedLengthOf(System.Int32)">
            <summary>
            Fixed-length structure type
            </summary>
            <param name="length">Message length</param>
            <remarks>
            Each message has a fixed length of the specified value
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ISocketClient">
            <summary>
            Socket client
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Connected">
            <summary>
            Connected to server callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Received">
            <summary>
            Received message from server callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.ReceivedAsString">
            <summary>
            Received message from server callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Disconnected">
            <summary>
            Disconnected from server callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Sent">
            <summary>
            Message sent to server callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Closed">
            <summary>
            Socket closed callback
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketClient.Address">
            <summary>
            Server address
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketClient.Port">
            <summary>
            Server listening port
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketClient.IsConnected">
            <summary>
            If client is connected
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.Close">
            <summary>
            Close the client
            </summary>
            <remarks>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Closed"/> will be invoked on main thread if you call this
            <para/>
            Both sending and receiving will be shutdown
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.Connect">
            <summary>
            Connect to server
            </summary>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Connected"/> will be invoked on the async thread if you call this
            <para/>
            If successful, a receiving loop will be started and <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Received"/>/<see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.ReceivedAsString"/> will be invoked when a message is received
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.ConnectAsync">
            <summary>
            Connect to server
            </summary>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Connected"/> will be invoked on main thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.ReceiveAsync">
            <summary>
            Receive messages from server
            </summary>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Received"/> will be invoked on main thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.Send(System.Byte[])">
            <summary>
            Send message to server
            </summary>
            <param name="message">Raw messaged</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Sent"/> will be invoked on the async thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.Send(System.String)">
            <summary>
            Send message to server
            </summary>
            <param name="message">String message</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Sent"/> will be invoked on the async thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.SendAsync(System.Byte[])">
            <summary>
            Send message to server
            </summary>
            <param name="message">Raw messgae</param>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Sent"/> will be invoked on main thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.SendAsync(System.String)">
            <summary>
            Send message to server
            </summary>
            <param name="message">String message</param>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Sent"/> will be invoked on main thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.Disconnect">
            <summary>
            Disconnect from server
            </summary>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketClient.Disconnected"/> will be invoked on the async thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.DisconnectAsync">
            <summary>
            Disconnect from server
            </summary>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClient.ReceiveLoop">
            <summary>
            Keep receiving untill disconnected or failed
            </summary>
            <returns>An async operation</returns>
            <remarks>
            This won't block the main thread
            <para/>
            </remarks>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ISocketClientToken">
            <summary>
            A client token used at server side
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketClientToken.ID">
            <summary>
            Client unique id
            </summary>
            <remarks>
            This will be different at each runtime, so don't use this for authetication
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClientToken.Close">
            <summary>
            Close the client token
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClientToken.Send(System.Byte[])">
            <summary>
            Send message to this client token
            </summary>
            <param name="message">Raw message</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.SentToClient"/> will be invoked on the async thread if you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketClientToken.Send(System.String)">
            <summary>
            Send message to this client token
            </summary>
            <param name="message">String message</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.SentToClient"/> will be invoked on the async thread if you call this
            </remarks>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ISocketServer">
            <summary>
            Socket server
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ClientConnected">
            <summary>
            Client accepted callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ReceivedFromClient">
            <summary>
            Received message from client callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ReceivedFromClientAsString">
            <summary>
            Received message from client callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ClientDisconnected">
            <summary>
            Client disconnected callback
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.SentToClient">
            <summary>
            Sent to client
            </summary>
        </member>
        <member name="E:Edu.Framework.Network.FlexiSocket.ISocketServer.Closed">
            <summary>
            Socket closed callback
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketServer.Backlog">
            <summary>
            Max connection
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketServer.Port">
            <summary>
            Listening port
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketServer.IsListening">
            <summary>
            If server is listenning for connections
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketServer.IPv6">
            <summary>
            If ipv6 is enabled
            </summary>
        </member>
        <member name="P:Edu.Framework.Network.FlexiSocket.ISocketServer.Clients">
            <summary>
            Connected clients
            </summary>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketServer.Close">
            <summary>
            Close the server
            </summary>
            <remarks>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.Closed"/> will be invoked on main thread if you call this
            <para/>
            Both sending and receiving will be shutdown
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketServer.StartListen(System.Int32)">
            <summary>
            Start listening
            </summary>
            <param name="backlog">Max connection</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ClientConnected"/> will be invoked on main thread when a client is accepted
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ReceivedFromClient"/> and <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ReceivedFromClientAsString"/>  will be invoked on main thread when a message from a client is received
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.ClientDisconnected"/> will be invoked on main thread when a client is disconnected
            <para/>
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketServer.SendToAll(System.Byte[])">
            <summary>
            Send message to all connected clients
            </summary>
            <param name="message">Message</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.SentToClient"/> will not be invoked when you call this
            </remarks>
        </member>
        <member name="M:Edu.Framework.Network.FlexiSocket.ISocketServer.SendToAll(System.String)">
            <summary>
            Send message to all connected clients
            </summary>
            <param name="message">Message</param>
            <remarks>
            This won't block the main thread
            <para/>
            <see cref="E:Edu.Framework.Network.FlexiSocket.ISocketServer.SentToClient"/> will not be invoked when you call this
            </remarks>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.MessageStructure">
            <summary>
            Message structure type
            </summary>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.MessageStructure.LengthPrefixed">
            <summary>
            Head+Body structure type
            </summary>
            <remarks>
            The message head is a 4-byte int type which represents the length of the coming message
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.MessageStructure.StringTerminated">
            <summary>
            Body+TerminatTag structure type
            </summary>
            <remarks>
            The message tail is a user-defined string like <c>&lt;EOF&gt;</c> which represents the end of a string message
            </remarks>
        </member>
        <member name="F:Edu.Framework.Network.FlexiSocket.MessageStructure.Custom">
            <summary>
            Each packed is treated as a single message
            </summary>
            <remarks>
            For large messages, packets should be merged by user manually
            </remarks>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ClosedCallback">
            <summary>
            Socket closed callback
            </summary>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ConnectedCallback">
            <summary>
            Socket connected callback
            </summary>
            <param name="success">Connecting result</param>
            <param name="exception">Socket exception</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ReceivedCallback">
            <summary>
            Socket received message callback
            </summary>
            <param name="success">Receiving result</param>
            <param name="exception">Socket exception</param>
            <param name="error">Socket error</param>
            <param name="message">Received message</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ReceivedStringCallback">
            <summary>
            Socket received message callback
            </summary>
            <param name="success">Receiving result</param>
            <param name="exception">Socket exception</param>
            <param name="error">Socket error</param>
            <param name="message">Received message</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.DisconnectedCallback">
            <summary>
            Socket disconnected callback
            </summary>
            <param name="success">Disconnecting result</param>
            <param name="exception">Socket exception</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.SentCallback">
            <summary>
            Socket message sent callback
            </summary>
            <param name="success">Sending result</param>
            <param name="exception">Socket exception</param>
            <param name="error">Socket error</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ClientConnectedCallback">
            <summary>
            Client connected callback
            </summary>
            <param name="client">Connected client</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ReceivedFromClientCallback">
            <summary>
            Received from client callback
            </summary>
            <param name="client">Source client</param>
            <param name="message">Message</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ReceivedStringFromClientCallback">
            <summary>
            Received from client callback
            </summary>
            <param name="client">Source client</param>
            <param name="message">Message</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.ClientDisconnectedCallback">
            <summary>
            Client disconnected callback
            </summary>
            <param name="client">Disconnected client</param>
        </member>
        <member name="T:Edu.Framework.Network.FlexiSocket.SentToClientCallback">
            <summary>
            Message sent(to client) callback
            </summary>
            <param name="success">Sending result</param>
            <param name="client">Target client</param>
        </member>
        <member name="T:Edu.Framework.Smtp.IEmail">
            <summary>
            发送接口
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.IEmail.SendMail(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage,System.Collections.Generic.IList{Edu.Framework.Smtp.SmtpImpl.RecieversList})">
            <summary>
            发送邮件
            
            </summary>
            <param name="smtpClient">Smtp客户端</param><param name="mailMessage">邮件信息</param><param name="recieverList">接收人列表</param>
            <returns>
            true 成功 false 失败
            </returns>
        </member>
        <member name="T:Edu.Framework.Smtp.InvalidEmailException">
            <summary>
            异常
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.InvalidEmailException.#ctor">
            <summary>
            构造
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.InvalidEmailException.#ctor(System.String)">
            <summary>
            构造
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Smtp.ISenderInfo">
            <summary>
            发送信息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.ISenderInfo.CreateMailBasicFormat(System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建邮件信息主体
            
            </summary>
            <param name="senderAddress">发送地址</param><param name="subject">邮件主题</param><param name="body">邮件内容</param><param name="isHtmlBody">是否Html内容</param>
            <returns>
            邮件消息对象
            </returns>
        </member>
        <member name="T:Edu.Framework.Smtp.ISmtpSeverSettings">
            <summary>
            Smtp设定
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.ISmtpSeverSettings.ConfigureSmtpServerSetting(System.String,System.Int32)">
            <summary>
            smtp配置
            
            </summary>
            <param name="smtpServerName">smtp服务,例如smtp.163.com</param><param name="port">smtp端口哦</param>
            <returns>
            smtp客户端
            </returns>
        </member>
        <member name="T:Edu.Framework.Smtp.MailGenerator">
            <summary>
            通用邮件发送
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.MailGenerator.#ctor">
            <summary>
            构造函数
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.MailGenerator.Generate(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            发送邮件
            
            </summary>
            <param name="userName">用户名</param><param name="password">密码</param><param name="toList">接收</param><param name="ccList">抄送</param><param name="bccList">隐藏抄送</param><param name="attachmentList">附件列表</param><param name="messageBody">邮件主体</param><param name="messageSubject">邮件标题</param><param name="isHtmlBody">是否html</param><param name="smtpServerName">smtp服务器</param><param name="port">端口(默认25)</param><param name="senderName">发件人显示名称</param>
            <returns>
            True 发送成功，false发送失败
            </returns>
        </member>
        <member name="M:Edu.Framework.Smtp.MailGenerator.CreateMailBasicFormat(System.String,System.String,System.String,System.Boolean)">
            <summary>
            设置消息主体
            
            </summary>
            <param name="userName">账号</param><param name="messageSubject">主体</param><param name="messageBody">内容</param><param name="isHtmlBody">内容是否html</param>
        </member>
        <member name="M:Edu.Framework.Smtp.MailGenerator.AddRecieverList(System.String)">
            <summary>
            解析接收人地址
            
            </summary>
            <param name="recieverList">接收人地址字符串</param>
            <returns>
            接收人地址
            </returns>
        </member>
        <member name="M:Edu.Framework.Smtp.MailGenerator.SetSmtpCredential(System.String,System.String,System.String,System.Int32)">
            <summary>
            Smtp账号密码设置
            
            </summary>
            <param name="userName">账号</param><param name="password">密码</param><param name="smtpServerName">smtp地址</param><param name="port">smtp端口</param>
        </member>
        <member name="T:Edu.Framework.Smtp.SmtpImpl.Email">
            <summary>
            发送主体
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.SmtpImpl.Email.SendMail(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage,System.Collections.Generic.IList{Edu.Framework.Smtp.SmtpImpl.RecieversList})">
            <summary>
            发送邮件
            </summary>
            <param name="smtpClient"></param>
            <param name="mailMessage"></param>
            <param name="recieverList"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Smtp.SmtpImpl.RecieversList">
            <summary>
            接收列表
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Smtp.SmtpImpl.RecieversList.RecieverList">
            <summary>
            接收列表
            
            </summary>
        </member>
        <member name="P:Edu.Framework.Smtp.SmtpImpl.RecieversList.RecieverType">
            <summary>
            接收类型
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Smtp.SmtpImpl.SenderInfo">
            <summary>
            发送信息
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.SmtpImpl.SenderInfo.CreateMailBasicFormat(System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建邮件信息主体
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Smtp.SmtpImpl.SmtpSeverSettings">
            <summary>
            smtp设定
            
            </summary>
        </member>
        <member name="M:Edu.Framework.Smtp.SmtpImpl.SmtpSeverSettings.ConfigureSmtpServerSetting(System.String,System.Int32)">
            <summary>
            设定smtp服务器
            
            </summary>
        </member>
        <member name="T:Edu.Framework.Utilities.AppHelper">
            <summary>应用程序助手</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.AppHelper._globalConfigIniPath">
            <summary>基本配置文件路径</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.AppHelper._cityConfigIniPath">
            <summary>应用城市配置文件路径</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.Instance">
            <summary>ApiHelper实例</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.RunWinService(System.Collections.Generic.List{System.String})">
            <summary>启动Window服务</summary>
            <param name="winSerivceNames">Window服务名</param>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.GetAppRootPath">
            <summary>
            获取应用程序根目录路径
            Winform,Web均适用
            </summary>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.SoftwareName">
            <summary>应用程序软件名</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.AppCityName">
            <summary>应用程序所应用城市名</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.ServiceConfig">
            <summary>系统远程服务配置集</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.InitConfig">
            <summary>
            初始化系统配置
            应用场景：主要侧重于非Web程序,Web程序也可以实用
            </summary>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.LoadRemoteConfig(System.String,System.Boolean)">
            <summary>加载自定义远程服务配置</summary>
            <param name="iniSectionKey">远程服务唯一标识</param>
            <param name="validInterfaceName">是否验证接口(契约)</param>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.GetRemoteServiceConfig(System.String)">
            <summary>获取远程服务配置</summary>
            <param name="uniqueKey">远程服务唯一标识</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.RemoveRemoteServiceConfig(System.String)">
            <summary>移除远程服务配置配置</summary>
            <param name="uniqueKey">远程服务唯一标识</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.UpdateRemoteServiceConfig(System.String,Edu.Framework.Comm.RemoteConfigDetail)">
            <summary>更新远程服务配置</summary>
            <param name="uniqueKey">远程服务唯一标识</param>
            <param name="remoteConfig">&gt;远程服务新配置</param>
        </member>
        <member name="P:Edu.Framework.Utilities.AppHelper.MefIocContainer">
            <summary>IOC容器</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.InitilizeMef(System.Object,System.Collections.Generic.List{System.Reflection.Assembly},System.Boolean)">
            <summary>
            初始化Mef.Ioc
            主要针对非Web应用程序,
            Web应用程序也能使用，如果不使用本方案，请使用其他IOC方案
            特点：在初始化的时候，从默认目录以及指定的程序集中扫描匹配
            </summary>
            <param name="objContainer">Ioc承载容器对象</param>
            <param name="lstAssembly">程序集</param>
            <param name="forceInitMef">是否强制初始化Ioc</param>
            <example>
            <![CDATA[
            AppHelper.InitilizeMef(AppHelper.Instance,
            new List<System.Reflection.Assembly>
            {
               Assembly.GetAssembly(typeof(CM00010)) ,
               //Assembly.GetAssembly(typeof(IScopedService)),
               //Assembly.GetAssembly(typeof(IScopedRepository))
            }, true);
            ]]>
            </example>
        </member>
        <member name="M:Edu.Framework.Utilities.AppHelper.InitilizeMefV2(System.Object,System.Collections.Generic.List{System.Reflection.Assembly},System.Boolean)">
            <summary>
            初始化Mef.Ioc
            主要针对非Web应用程序,
            Web应用程序也能使用，如果不使用本方案，请使用其他IOC方案
            特点：在初始化的时候，只加载制定的程序集，并从中扫描匹配
            </summary>
            <param name="objContainer">Ioc承载容器对象</param>
            <param name="lstAssembly">程序集</param>
            <param name="forceInitMef">是否强制初始化Ioc</param>
            <example>
            <![CDATA[
            AppHelper.InitilizeMefV2(AppHelper.Instance,
            new List<System.Reflection.Assembly>
            {
               Assembly.GetAssembly(typeof(CM00010)) ,
               Assembly.GetAssembly(typeof(IScopedService)),
               Assembly.GetAssembly(typeof(IScopedRepository))
            }, true);
            ]]>
            </example>
        </member>
        <member name="T:Edu.Framework.Utilities.CheckHelper">
            <summary>参数检查助手</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotNull``1(``0,System.String,System.String)">
            <summary>检查某对象是否为空对象：TRACE模式下运行</summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsNull``1(``0,System.String,System.String)">
            <summary>检查某对象是否为空对象：TRACE模式下运行</summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>检查某对象是否为空对象：TRACE模式下运行</summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>检查某对象是否为空对象：TRACE模式下运行</summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotEmpty(System.String,System.String,System.String)">
            <summary>检查某对象是否为空字符串：TRACE模式下运行</summary>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsEmpty(System.String,System.String,System.String)">
            <summary>检查某对象是否为空字符串：TRACE模式下运行</summary>
            <param name="value">对象值</param>
            <param name="parameterName">对象名</param>
            <param name="messge">消息</param>
            <returns>不为空则返回原值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotNull``1(``0,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <typeparam name="T"></typeparam>
            <param name="messge">消息</param>
            <param name="value"></param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsNull``1(``0,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotNull``1(System.Nullable{``0},System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsNull``1(System.Nullable{``0},System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotEmpty(System.String,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsEmpty(System.String,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.NotNullOrEmpty(System.String,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CheckHelper.IsNullOrEmpty(System.String,System.String)">
            <summary>断言判定：DEBUG模式下运行</summary>
            <param name="value"></param>
            <param name="messge">消息</param>
        </member>
        <member name="T:Edu.Framework.Utilities.ColorHelper">
            <summary>颜色转换</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ColorHelper.ColorHx16ToRgb(System.String)">
            <summary>颜色：16进制转成RGB</summary>
            <param name="strHxColor">设置16进制颜色 [返回RGB]</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ColorHelper.ColorRgBtoHx16(System.Int32,System.Int32,System.Int32)">
            <summary>颜色：RGB转成16进制</summary>
            <param name="r">红 int</param>
            <param name="g">绿 int</param>
            <param name="b">蓝 int</param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Utilities.ConfigHelper">
            <summary>配置文件配置助手</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSetting(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>string</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSettingForInt(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>int</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSettingForLong(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>long</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSettingForFloat(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>float</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSettingForDouble(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>double</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppSettingForGuid(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnection(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>string</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnectionForInt(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>int</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnectionForLong(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>long</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnectionForFloat(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>float</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnectionForDouble(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>double</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetAppConnectionForGuid(System.String)">
            <summary>获取配置</summary>
            <param name="keyName">KEY</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ConfigHelper.GetEmailSettingsSectionGroup">
            <summary>获取Email配置节点</summary>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Utilities.CookieHelper">
            <summary>Cookie操作</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>设置Cookie值</summary>
            <param name="cookiename">Cookie名</param>
            <param name="cookievalue">Cookie值</param>
            <param name="dt">过期日期</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CookieHelper.GetCookie(System.String)">
            <summary>获取cookie值</summary>
            <param name="cookiename">Cookie名</param>
        </member>
        <member name="M:Edu.Framework.Utilities.CookieHelper.RemoveCookie(System.String)">
            <summary>过期Cookie并移除</summary>
            <param name="cookiename">Cookie名</param>
        </member>
        <member name="T:Edu.Framework.Utilities.CryptHelper">
            <summary>加密解密管理</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.CryptHelper.Instance">
            <summary>加密揭秘组件实例</summary>
        </member>
        <member name="T:Edu.Framework.Utilities.EncodingHelp">
            <summary>
            编码帮助类<seealso cref="T:System.Text.Encoding" />
            </summary>
        </member>
        <member name="M:Edu.Framework.Utilities.EncodingHelp.#cctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.EncodingHelp.GetCoding(System.Int32)">
            <summary>根据编码Code获取编码</summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Gb2312">
            <summary>简体中文</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Big5">
            <summary>繁体中文</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.ShiftJis">
            <summary>日文</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Korea">
            <summary>韩文</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Ascii">
            <summary>ASCII编码</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.BigEndianUnicode">
            <summary>BigEndianUnicode</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Default">
            <summary>默认页面编码</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Unicode">
            <summary>Unicode编码</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Utf7">
            <summary>UTF7编码</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.EncodingHelp.Utf8">
            <summary>UTF8编码</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.EncodingHelp.GetEncoding(System.String)">
            <summary>根据EncodeingName 获取编码</summary>
            <param name="name">编码名称</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.EncodingHelp.GetEncoding(System.Int32)">
            <summary>根据Encode Code 获取编码</summary>
            <param name="codePage">页面编码</param>
        </member>
        <member name="T:Edu.Framework.Utilities.ExcelHelper">
            <summary>Excel操作辅助工具</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.GetExcelFileConnString(System.String)">
            <summary>获取连接Excel字符串</summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTableByOledb(System.String)">
            <summary>读取Excel文件到DataSet中</summary>
            <param name="execelFilePath">文件[绝对]路径</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTableByOledb(System.String,System.Int32)">
            <summary>读取Excel文件到DataSet中</summary>
            <param name="execelFilePath">文件[绝对]路径</param>
            <param name="iWorksheetNo">worksheet索引</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ExportToStream(System.Data.DataTable,System.String,System.String)">
            <summary>导出到Excel的MemoryStream</summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="dateFormat">日期格式字</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ExportToStream(System.Data.DataTable,System.String,System.IO.FileStream,System.String)">
            <summary>DataTable导出到Excel的MemoryStream</summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="fs">文件流</param>
            <param name="dateFormat">日期字符格式</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ExportToExcel(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>DataTable导出到Excel文件</summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="filePath">保存文件路径</param>
            <param name="dateFormat">日期格式</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.String)">
            <summary>读取excel 默认第一行为标头</summary>
            <param name="excelFilePath">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.IO.Stream)">
            <summary>读取Excel流到DataTable</summary>
            <param name="stream">Excel流</param>
            <returns>第一个sheet中的数据</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.IO.Stream,System.String,System.Int32)">
            <summary>读取Excel流到DataTable</summary>
            <param name="stream">Excel流</param>
            <param name="sheetName">表单名</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <returns>指定sheet中的数据</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataSet(System.IO.Stream)">
            <summary>读取Excel流到DataSet</summary>
            <param name="stream">Excel流</param>
            <returns>Excel中的数据</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataSet(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>读取Excel流到DataSet</summary>
            <param name="stream">Excel流</param>
            <param name="dict">字典参数，key：sheet名，value：列头所在行号，-1表示没有列头</param>
            <returns>Excel中的数据</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.String,System.String,System.Int32)">
            <summary>读取excel</summary>
            <param name="excelFilePath">excel文件路径</param>
            <param name="sheetName">需要导出的sheet</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.String,System.Int32,System.Int32)">
            <summary>读取excel</summary>
            <param name="excelFilePath">excel文件路径</param>
            <param name="sheetIndex">需要导出的sheet序号</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>读取excel</summary>
            <param name="excelFilePath">excel文件路径</param>
            <param name="sheetName">需要导出的sheet</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <param name="needHeader"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>读取excel</summary>
            <param name="excelFilePath">excel文件路径</param>
            <param name="sheetIndex">需要导出的sheet序号</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <param name="needHeader">是否需要导出头部</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ImportToDataTable(NPOI.SS.UserModel.ISheet,System.Int32,System.Boolean)">
            <summary>将制定sheet中的数据导出到datatable中</summary>
            <param name="sheet">需要导出的sheet</param>
            <param name="headerRowIndex">列头所在行号，-1表示没有列头</param>
            <param name="needHeader">是否需要导出头部</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.InsertSheet(System.String,System.String,System.Data.DataTable)">
            <summary>往XLS插入数据</summary>
            <param name="excelFilePath">保存文件名</param>
            <param name="sheetname">工作表表名</param>
            <param name="dt">待插入数据</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.String[],System.Int32,System.Int32)">
            <summary>更新Excel表格</summary>
            <param name="excelFilePath">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.String[][],System.Int32[],System.Int32)">
            <summary>更新Excel表格</summary>
            <param name="excelFilePath">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.Double[],System.Int32,System.Int32)">
            <summary>更新Excel表格</summary>
            <param name="excelFilePath">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.Double[][],System.Int32[],System.Int32)">
            <summary>更新Excel表格</summary>
            <param name="excelFilePath">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.GetSheetNumber(System.String)">
            <summary>获取Excel工作表个数</summary>
            <param name="excelFile">excel文件路径</param>
            <returns>工作表个数</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.GetSheetNames(System.String)">
            <summary>获取Excel.Sheet名</summary>
            <param name="excelFile">excel文件路径</param>
            <returns>以数组形式返回sheetName</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.IsNumeric(System.String,System.Double@)">
            <summary>验证字符串是否是Double</summary>
            <param name="message">字符串</param>
            <param name="result">转换后的值</param>
            <returns>转换是否成功</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.PrintByWeb(System.Data.DataTable,System.String,System.String)">
            <summary>
            采用Response的方式把DataTable打印到设备上,实质是下载操作
            此处的设备表现形式：屏幕
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="headerText">表头文本</param>
            <param name="strFileName">文件名</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.Export(System.Data.DataTable,System.String,NPOI.HPSF.SummaryInformation)">
            <summary>DataTable导出到Excel的MemoryStream第二步</summary>
            <param name="dtSource">源DataTable</param>
            <param name="headerText">表头文本</param>
            <param name="author">文件版权信息： 参数实例创建方式参考PropertySetFactory.CreateSummaryInformation()</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.PrintByWeb(System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            分浏览器进行编码（IE必须编码，FireFox不能编码，Chrome可编码也可不编码）
            实质做的下载操作
            </summary>
            <param name="ds">数据源</param>
            <param name="sheetName">Sheeet名</param>
            <param name="strFileName">文件名</param>
            <param name="encode">文本编码</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.ExportToStream(System.Data.DataSet,System.String)">
            <summary>由DataSet导出Excel.MemoryStream</summary>
            <param name="dtSet">要导出数据的DataSet对象</param>
            <param name="sheetName">工作表名称,逗号分隔，就表示导出多张表</param>
            <returns>Excel工作表</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.HasData(System.IO.Stream)">
            <summary>验证导入的Excel是否有数据</summary>
            <param name="excelFileStream">excel文件流</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ExcelHelper.GetExcelFileType(System.String)">
            <summary>根据文件路径获取Excel文件是XLSX还是XLS类型的文件</summary>
            <param name="execlFilPath">excel路径</param>
            <returns>Excel文件类型</returns>
        </member>
        <member name="T:Edu.Framework.Utilities.FieldMemberInfo">
            <summary>字段邦定类型</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.FieldMemberInfo.FieldBindingFlags">
            <summary>字段绑定预置值</summary>
        </member>
        <member name="T:Edu.Framework.Utilities.HexStringCode">
            <summary>将字节转换为16进制编码/16进制编码转换为字符</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.HexStringCode.GetBytesFromHexString(System.String)">
            <summary>
            <para>将16进制数序列化成数组.</para>
            </summary>
            <param name="hexidecimalNumber">
            <para>16进制数.</para>
            </param>
            <returns><para>字节数组.</para></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.HexStringCode.GetHexStringFromBytes(System.Byte[])">
            <summary>
            <para>根据字节数组返回16进制数 (eg: 0F351A).</para>
            </summary>
            <param name="bytes">
            <para>字节数组.</para>
            </param>
            <returns>
            <para>16进制数.</para>
            </returns>
        </member>
        <member name="T:Edu.Framework.Utilities.ImageHelper">
            <summary>图片处理类</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.ZoomAuto(System.Web.HttpPostedFile,System.String,System.Double,System.Double,System.String,System.String,Edu.Framework.Utilities.ImageHelper.ImagePosition,System.Single)">
            <summary>图片等比缩放</summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
            <param name="watermarkpositon">水印图片位置</param>
            <param name="alpha">透明度</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.ZoomAuto(System.IO.Stream,System.String,System.Double,System.Double,System.String,System.String,Edu.Framework.Utilities.ImageHelper.ImagePosition,System.Single)">
            <summary>图片等比缩放</summary>
            <param name="stream">图片流</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
            <param name="watermarkpositon">水印图片位置</param>
            <param name="alpha">透明度</param>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.GetWarterImgPosition(Edu.Framework.Utilities.ImageHelper.ImagePosition,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>获取水印图片位置</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.IsWebImage(System.String)">
            <summary>
            判断文件类型是否为WEB格式图片
            (注：JPG,GIF,BMP,PNG)
            </summary>
            <param name="contentType">HttpPostedFile.ContentType</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.GetByteSFromImage(System.Drawing.Image,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)">
            <summary>获取图像字节流</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.GetByteSFromImage(System.Drawing.Image)">
            <summary>获取图像字节流</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.ImageHelper.GetImageFromBtys(System.Byte[])">
            <summary>生成图像从字节流</summary>
        </member>
        <member name="T:Edu.Framework.Utilities.ImageHelper.ImagePosition">
            <summary>图片位置</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.LeftTop">
            <summary>
            左上 
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.RigthBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.TopMiddle">
            <summary>
            顶部居中 
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.BottomMiddle">
            <summary>
            底部居中
            </summary>
        </member>
        <member name="F:Edu.Framework.Utilities.ImageHelper.ImagePosition.Center">
            <summary>
            中心
            </summary>
        </member>
        <member name="T:Edu.Framework.Utilities.IniHelper">
            <summary>IniHelper操作助手</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.Create(System.String)">
            <summary>
            创建操作助手
            </summary>
            <param name="filPath"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadString(System.String,System.String)">
            <summary>返回字符串</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadInt(System.String,System.String,System.Int32)">
            <summary>返回int型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadLong(System.String,System.String,System.Int64)">
            <summary>返回long型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadByte(System.String,System.String,System.Byte)">
            <summary>返回byte型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadFloat(System.String,System.String,System.Single)">
            <summary>返回float型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadDouble(System.String,System.String,System.Int32)">
            <summary>返回double型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadDateTime(System.String,System.String,System.String)">
            <summary>返回日期型的数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadBool(System.String,System.String,System.Boolean)">
            <summary>读bool量</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.Write(System.String,System.String,System.Object)">
            <summary>用于写任何类型的键值到ini文件中</summary>
            <param name="Section">该键所在的节名称</param>
            <param name="Key">该键的名称</param>
            <param name="Value">该键的值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ReadSections">
            <summary>返回该配置文件中所有Section名称的集合</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.SectionExists(System.String)">
            <summary>判断指定的节是否存在</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.ValueExits(System.String,System.String)">
            <summary>判断指定的节中指定的键是否存在</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.DeleteKey(System.String,System.String)">
            <summary>删除指定的节中的指定键</summary>
            <param name="section">该键所在的节的名称</param>
            <param name="key">该键的名称</param>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.DeleteSection(System.String)">
            <summary>删除指定的节的所有内容</summary>
            <param name="section">要删除的节的名字</param>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.AddSection(System.String)">
            <summary>添加一个节</summary>
            <param name="section">要添加的节名称</param>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.DeleteFile">
            <summary>删除ini文件</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.CreateFile">
            <summary>创建文件</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.IniHelper.FileExists">
            <summary>判断文件是否存在</summary>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Utilities.LogHelper">
            <summary>使用LOG4NET记录日志的功能，在WEB.CONFIG里要配置相应的节点</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.LogHelper.WriteLog(System.String,System.Exception,System.String,System.Action{System.Exception,System.String})">
            <summary>写日志</summary>
            <param name="info">日志信息</param>
            <param name="ex">异常信息</param>
            <param name="exceptionPlace">异常附加信息，比如异常发送位置</param>
            <param name="action">对日志信息的其他处理</param>
        </member>
        <member name="M:Edu.Framework.Utilities.LogHelper.WriteLog(System.String,System.Exception,System.Action{System.Exception,System.String})">
            <summary>写日志</summary>
            <param name="info">日志信息</param>
            <param name="ex">异常信息</param>
            <param name="action">对日志信息的其他处理</param>
        </member>
        <member name="M:Edu.Framework.Utilities.LogHelper.WriteLog(System.String)">
            <summary>写日志</summary>
            <param name="info">日志信息</param>
        </member>
        <member name="T:Edu.Framework.Utilities.MailHelper">
            <summary>发送邮件</summary>
            <remarks>
            Web.专用
            Web.config/App.Config配置注意,
            httpRuntime.requestValidationMode="2.0"||"4.0"：
            指示将使用哪种 ASP.NET 版本特定的验证方法。
            任何小于 4.0 的数值将被解释为 2.0。
            任何大于 4.0 的数值将被解释为 4.0。
            默认值为 4.0
            
            requestValidationMode="4.0"时，所有的请求，asp.net4.0（或者大于4.0都会做请求强制安全验证），无法通过配置强制禁用监测
            requestValidationMode="2.0"时，所有的请求，asp.net4.0（或者小于4.0）时，请求强制安全验证，可以不是必须的，可以人工干预控制
            </remarks>
            <example>
            配置示范：
            <code>
            <add key="SMTPUser" value="163邮箱地址" />
            <add key="SMTPPassword" value="163邮箱密码" />
            <add key="SMTP" value="smtp.163.com" />
            <add key="SMTPPort" value="25" />
            </code>
            </example>
            <example>
            asp.net版本大于于4.0，配置如下，否则会出现类似" 发送***失败，有敏感字符" ，具体表现为html元素大小尖括号的内容具有敏感性
            出现该提示信息时，请添加一下配置
            <code>
            <system.web>
            <httpRuntime requestValidationMode="2.0"></httpRuntime>
            </system.web>
            </code>
            </example>
        </member>
        <member name="M:Edu.Framework.Utilities.MailHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="mailTitle"></param>
            <param name="toMailList"></param>
            <param name="ccMainList"></param>
            <param name="bccMailList"></param>
            <param name="mailBody"></param>
            <param name="senderName"></param>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Utilities.NullEncoding">
            <summary>当编码为空时返回相应转化函数的默认值为0</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.NullEncoding.Instance">
            <summary>初始化NullEncoding</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>GetByteCount</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>GetBytes</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>GetCharCount</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>GetChars</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetMaxByteCount(System.Int32)">
            <summary>GetMaxByteCount</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.NullEncoding.GetMaxCharCount(System.Int32)">
            <summary>GetMaxCharCount</summary>
        </member>
        <member name="T:Edu.Framework.Utilities.PyHelper">
            <summary>汉子首字母转换</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.PyHelper.Pv">
            <summary>包含字符 ASC 码的整形数组。</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.PyHelper.Ps">
            <summary>包含汉字拼音的字符串数组。</summary>
        </member>
        <member name="F:Edu.Framework.Utilities.PyHelper._bd">
            <summary>包含要排除处理的字符的字符串数组。</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.PyHelper.Phrase">
            <summary>设置或获取包含列外词组读音的键/值对的组合。</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.Convert(System.String,System.String,System.Boolean)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 （ZhangSanFeng 或者Zhang{separator}San{separator}Feng或者zhangsanfegn或者zhang{separator}san{separator}feng或者zhagnsanfeng）|（Z{separator}S{separator}F或者z{separator}s{separator}f）
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.Convert(System.String,System.String)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 （ZhangSanFeng 或者Zhang{separator}San{separator}Feng或者zhangsanfegn或者zhang{separator}san{separator}feng或者zhagnsanfeng）|（Z{separator}S{separator}F或者z{separator}s{separator}f）
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.Convert(System.String,System.Boolean)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 （ZhangSanFeng 或者zhangsanfegn或者zhagnsanfeng）|（ZSF或者zsf）
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.Convert(System.String)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 （ZhangSanFeng或者zhangsanfegn）|（ZSF或者zsf）
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertCharCap(System.String,System.String,System.Boolean)">
            <summary>将指定中文字符串转换为拼音形式的首字母。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 ZSF 或者Z{separator}S{separator}F或者zsf或者z{separator}s{separator}f
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertCharCap(System.String,System.String)">
            <summary>将指定中文字符串转换为拼音形式的首字母。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 ZSF或者Z{separator}S{separator}F或者zsf或者z{separator}s{separator}f
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertCharCap(System.String)">
            <summary>将指定中文字符串转换为拼音形式的首字母。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 ZSF或者zsf
            </returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertPinYinCap(System.String,System.String,System.Boolean)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 ZhangSanFeng 或者Zhang_San_Feng或者zhangsanfegn或者zhang_san_feng</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertPinYinCap(System.String,System.String)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 zhangsanfegn或者zhang_san_feng</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.PyHelper.ConvertPinYinCap(System.String)">
            <summary>将指定中文字符串转换为拼音形式。</summary>
            <param name="chs">要转换的中文字符串。</param>
            <returns>包含中文字符串的拼音的字符串。
            返回格式 zhangsanfegn或者zhang_san_feng</returns>
        </member>
        <member name="T:Edu.Framework.Utilities.SqLiteHelper">
            <summary>
            Sqlite操作助手
            使用场景：    非EF通过Ado.net模式快捷访问
            不适合场景：  需要丰富的操作，以及各种特性包括你Linq等支持，请使用EF模式
            </summary>
            <remarks>
            本工具运行需要：添加System.Data.SQLite程序集，版本号不低于1.0.103.0
            ///
            </remarks>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.InitSqlieConnection(System.String,System.Boolean,System.Func{System.String,System.String})">
            <summary>初始化连接字符串</summary>
            <param name="connectionString">连接字符串：; </param>
            <param name="resolveConn">解密连接字符串函数</param>
            <param name="isEcriype">是否加密</param>
            <![CDATA[
                        SqLiteHelper.InitSqlieConnection("Data Source=Test.db3;Pooling=true;FailIfMissing=false",false,null);
                        ]]>
        </member>
        <member name="P:Edu.Framework.Utilities.SqLiteHelper.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.SqLiteHelper.Connection">
            <summary>连接对象</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.CreateCommand(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>创建命令</summary>
            <param name="commandText">语句</param>
            <param name="commandParameters">语句参数.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>创建参数</summary>
            <param name="parameterName">参数名</param>
            <param name="parameterType">参数类型</param>
            <param name="parameterValue">参数值</param>
            <returns>返回创建的参数</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteDataSet(System.String,System.Object[])">
            <summary>查询数据集</summary>
            <param name="commandText">查询语句.</param>
            <param name="paramList">object参数列表.</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteCommand)">
            <summary>查询数据集</summary>
            <param name="cmd">SQLiteCommand对象</param>
            <returns>返回数据集</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteTransaction,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>查询数据集</summary>
            <param name="transaction">SQLiteTransaction对象. </param>
            <param name="commandText">查询语句.</param>
            <param name="commandParameters">命令的参数列表.</param>
            <returns>DataSet</returns>
            <remarks>必须手动执行关闭连接transaction.connection.Close</remarks>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>查询数据集</summary>
            <param name="transaction">SQLiteTransaction对象 </param>
            <param name="commandText">查询语句.</param>
            <param name="commandParameters">命令参数列表</param>
            <returns>返回数据集</returns>
            <remarks>必须手动执行关闭连接transaction.connection.Close</remarks>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.UpdateDataset(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.DataSet,System.String)">
            <summary>更新数据集中数据到数据库</summary>
            <param name="insertCommand">insert语句</param>
            <param name="deleteCommand">delete语句</param>
            <param name="updateCommand">update语句</param>
            <param name="dataSet">要更新的DataSet</param>
            <param name="tableName">数据集中要更新的table名</param>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>ExecuteReader方法</summary>
            <param name="cmd">查询命令</param>
            <param name="commandText">含有类似@colume参数的sql语句</param>
            <param name="paramList">语句参数列表</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>执行ExecuteNonQuery方法</summary>
            <param name="commandText">语句</param>
            <param name="paramList">参数</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            执行ExecuteNonQuery方法
            </summary>
            <param name="transaction"></param>
            <param name="commandText"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>执行ExecuteNonQuery方法</summary>
            <param name="cmd">创建好的命令.</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>执行ExecuteScalar</summary>
            <param name="commandText">语句s</param>
            <param name="paramList">参数</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>ExecuteXmlReader返回xml格式</summary>
            <param name="command">语句</param>
            <returns>返回XmlTextReader对象</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.AttachParameters(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>增加参数到命令（自动判断类型）</summary>
            <param name="cmd">操作</param>
            <param name="commandText">命令语句</param>
            <param name="paramList">object参数列表</param>
            <returns>返回SQLiteParameterCollection参数列表</returns>
            <remarks>Status experimental. Regex appears to be handling most issues. Note that parameter object array must be in same ///order as parameter names appear in SQL statement.</remarks>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>Executes non query typed params from a DataRow</summary>
            <param name="command">Command.</param>
            <param name="dataRow">Data row.</param>
            <returns>Integer result code</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the command's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Edu.Framework.Utilities.SqLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="T:Edu.Framework.Utilities.TypeHelper">
            <summary>关于类型、实例的一些实用方法</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.CreateType(System.String,System.Boolean)">
            <summary>从类型名称中创建类型</summary>
            <param name="typeName">类型名</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <returns>Type</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.CreateObject(System.Type,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>从类型中创建此类型的实例</summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.CreateObject(System.Type,System.Type,System.Boolean,System.Object[])">
            <summary>从类型中创建此类型的实例（本方法不支持参数可为Null的构造函数）</summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.CreateObject(System.String,System.Type,System.Boolean,System.Object[])">
            <summary>从类型名中创建此类型的实例</summary>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.CreateObject(System.String,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>从类型名中创建此类型的实例</summary>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>使用反射调用方法</summary>
            <param name="obj">类型实例</param>
            <param name="methodName">方法名</param>
            <param name="parameters">参数列表</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.FindType(System.String)">
            <summary>在当前应用程序域中查找指定的类型</summary>
            <param name="typeName">类型全名（包括命名空间）</param>
            <returns>找到则返回指定的类型，否则返回空</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.TypeHelper.GetAttributeFromAssembly``1(System.Reflection.Assembly[])">
            <summary>从程序集中获得元属性</summary>
            <param name="assemblies">程序集，如果为null，则从当前应用程序域中获取所载入的所有程序集</param>
            <returns>找到的元属性的数组</returns>
        </member>
        <member name="T:Edu.Framework.Utilities.WebEnvironmentHelp">
            <summary>web 相关环境变量</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.WebEnvironmentHelp.GetClientIp">
            <summary>获取客户端使用IP</summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.WebEnvironmentHelp.GetBrowser">
            <summary>获取客户端浏览器</summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.WebEnvironmentHelp.SystemCheck">
            <summary>获取操作系统版本号</summary>
            <returns></returns>
        </member>
        <member name="T:Edu.Framework.Utilities.XmlHelper">
            <summary>XML操作助手</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.Instance(System.String)">
            <summary>根据XML路径创建XML文件实例</summary>
            <param name="xmlUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.#ctor">
            <summary>构造函数</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.#ctor(System.String)">
            <summary>构造函数</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.XmlHelper.ErrorMessage">
            <summary>错误消息</summary>
        </member>
        <member name="P:Edu.Framework.Utilities.XmlHelper.FilePath">
            <summary>文件路径</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.OpenXml">
            <summary>加载XML文件，创建操作对象</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.CreatexmlDocument(System.String,System.String,System.String,System.String)">
            <summary>创建一个带有根节点的Xml 文件</summary>
            <param name="fileName">Xml 文件名称</param>
            <param name="rootName">根节点名称</param>
            <param name="encode">编码方式:gb2312，UTF-8 等常见的</param>
            <param name="dirPath">保存的目录路径</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetData(System.String)">
            <summary>得到数据表</summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetDataTable(System.String)">
            <summary>得到数据表</summary>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetXmlNodeValue(System.String,System.String)">
            <summary>
            功能:
            读取指定节点的指定属性值
            </summary>
            <param name="strNode">节点名称(相对路径：//+节点名称)</param>
            <param name="strAttribute">此节点的属性</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetXmlNodeValue(System.String)">
            <summary>读取指定节点的值</summary>
            <param name="strNode">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetXmlRoot">
            <summary>获取XML文件的根元素</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.GetNodeValue(System.String)">
            <summary>获取XML节点值</summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.SetXmlNodeValue(System.String,System.String)">
            <summary>
            功能:
            设置节点值
            </summary>
            <param name="xmlNodePath">节点的名称</param>
            <param name="xmlNodeValue">节点值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.AddParentNode(System.String)">
            <summary>在根节点下添加父节点</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.AddChildNode(System.String,System.String)">
            <summary>向一个已经存在的父节点中插入一个子节点</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.AddAttribute(System.String,System.String)">
            <summary>向一个节点添加属性</summary>
            <param name="NodePath"></param>
            <param name="NodeAttribute"></param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.InsertNode(System.String,System.Boolean,System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>插入一个节点和它的若干子节点</summary>
            <param name="newNodeName">插入的节点名称</param>
            <param name="hasAttributes">此节点是否具有属性，True 为有，False 为无</param>
            <param name="fatherNode">此插入节点的父节点</param>
            <param name="htAtt">此节点的属性，Key 为属性名，Value 为属性值</param>
            <param name="htSubNode"> 子节点的属性， Key 为Name,Value 为InnerText</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.SetAttributes(System.Xml.XmlElement,System.Collections.Hashtable)">
            <summary>设置节点属性</summary>
            <param name="xe">节点所处的Element</param>
            <param name="htAttribute">节点属性，Key 代表属性名称，Value 代表属性值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.AddNodes(System.String,System.Xml.XmlDocument,System.Xml.XmlElement,System.Collections.Hashtable)">
            <summary>增加子节点到根节点下</summary>
            <param name="rootNode">上级节点名称</param>
            <param name="xmlDoc">Xml 文档</param>
            <param name="rootXe">父根节点所属的Element</param>
            <param name="SubNodes">子节点属性，Key 为Name 值，Value 为InnerText 值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.SetXmlNodeValue(System.String,System.String,System.String)">
            <summary>
            功能:
            设置节点的属性值
            </summary>
            <param name="xmlNodePath">节点名称</param>
            <param name="xmlNodeAttribute">属性名称</param>
            <param name="xmlNodeAttributeValue">属性值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.UpdateNode(System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>更新节点</summary>
            <param name="fatherNode">需要更新节点的上级节点</param>
            <param name="htAtt">需要更新的属性表，Key 代表需要更新的属性，Value 代表更新后的值</param>
            <param name="htSubNode">需要更新的子节点的属性表，Key 代表需要更新的子节点名字Name,Value 代表更新后的值InnerText</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.UpdateNodes(System.Xml.XmlNodeList,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>更新节点属性和子节点InnerText 值</summary>
            <param name="root">根节点名字</param>
            <param name="htAtt">需要更改的属性名称和值</param>
            <param name="htSubNode">需要更改InnerText 的子节点名字和值</param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.DeleteAttribute(System.String,System.String,System.String)">
            <summary>删除一个节点的属性</summary>
            <param name="NodePath"></param>
            <param name="NodeAttribute"></param>
            <param name="NodeAttributeValue"></param>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.DeleteXmlNode(System.String)">
            <summary>删除一个节点</summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.DeleteNodes(System.String)">
            <summary>删除指定节点下的子节点</summary>
            <param name="fatherNode">制定节点</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.SavexmlDocument">
            <summary>
            功能:
            保存XML文件
            </summary>
        </member>
        <member name="M:Edu.Framework.Utilities.XmlHelper.SavexmlDocument(System.String)">
            <summary>功能: 保存XML文件</summary>
            <param name="tempXmlFilePath"></param>
        </member>
    </members>
</doc>
